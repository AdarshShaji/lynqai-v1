{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n  async processUserInput(userInput, platform, conversationId) {\n    console.log('Processing user input:', userInput);\n    console.log('Platform:', platform);\n    console.log('Conversation ID:', conversationId);\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const systemMessage = this.constructSystemMessage(platform);\n    const userMessage = this.constructUserMessage(userInput);\n    console.log('System Message:', systemMessage);\n    console.log('User Message:', userMessage);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      console.log('Got auth token');\n      const response = await axios.post('/generate-text', {\n        platform,\n        systemMessage,\n        userMessage,\n        conversationId,\n        wordCount: 50\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Received response:', response.data);\n      let aiResponse = response.data.generated_text;\n      aiResponse = this.postProcessResponse(aiResponse, platform);\n      console.log('Processed AI response:', aiResponse);\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return {\n        text: aiResponse,\n        conversationId: response.data.conversationId\n      };\n    } catch (error) {\n      console.error('Error in processing:', error);\n      if (error.response) {\n        console.error('Error response:', error.response.data);\n        console.error('Error status:', error.response.status);\n      }\n      throw error;\n    }\n  }\n  constructSystemMessage(platform) {\n    return `You are Sam, a professional Content Strategist for ${platform}. Provide concise, actionable advice for creating engaging posts. Use a friendly, professional tone. Limit responses to 50 words.`;\n  }\n  constructUserMessage(userInput) {\n    return `User's request: \"${userInput}\"\n\nRespond as Sam, the ${this.platform} Content Strategist. Provide specific, actionable advice related to the user's input.`;\n  }\n  postProcessResponse(response, platform) {\n    // Remove any part that looks like it's repeating the prompt\n    response = response.replace(/^(Sam:|As a professional Content Strategist for [^,]+,)/, '').trim();\n\n    // Ensure the response starts with an appropriate introduction\n    if (!response.startsWith(\"Here's my advice:\")) {\n      response = `Here's my advice: ${response}`;\n    }\n\n    // Truncate to 50 words if it's too long\n    const words = response.split(/\\s+/);\n    if (words.length > 50) {\n      response = words.slice(0, 50).join(' ') + '...';\n    }\n\n    // Ensure the response ends with proper punctuation\n    if (!/[.!?]$/.test(response)) {\n      response += '.';\n    }\n    return response;\n  }\n  updateConversationStage(aiResponse, userInput) {\n    // ... (keep the existing implementation)\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","conversationId","console","log","push","role","content","systemMessage","constructSystemMessage","userMessage","constructUserMessage","_auth$currentUser","token","currentUser","getIdToken","response","post","wordCount","headers","Authorization","data","aiResponse","generated_text","postProcessResponse","updateConversationStage","text","error","status","replace","trim","startsWith","words","split","length","slice","join","test","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n\r\n  async processUserInput(userInput, platform, conversationId) {\r\n    console.log('Processing user input:', userInput);\r\n    console.log('Platform:', platform);\r\n    console.log('Conversation ID:', conversationId);\r\n\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const systemMessage = this.constructSystemMessage(platform);\r\n    const userMessage = this.constructUserMessage(userInput);\r\n\r\n    console.log('System Message:', systemMessage);\r\n    console.log('User Message:', userMessage);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      console.log('Got auth token');\r\n\r\n      const response = await axios.post('/generate-text', \r\n        { \r\n          platform, \r\n          systemMessage,\r\n          userMessage,\r\n          conversationId,\r\n          wordCount: 50\r\n        },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      console.log('Received response:', response.data);\r\n\r\n      let aiResponse = response.data.generated_text;\r\n      aiResponse = this.postProcessResponse(aiResponse, platform);\r\n\r\n      console.log('Processed AI response:', aiResponse);\r\n\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return {\r\n        text: aiResponse,\r\n        conversationId: response.data.conversationId\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in processing:', error);\r\n      if (error.response) {\r\n        console.error('Error response:', error.response.data);\r\n        console.error('Error status:', error.response.status);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructSystemMessage(platform) {\r\n    return `You are Sam, a professional Content Strategist for ${platform}. Provide concise, actionable advice for creating engaging posts. Use a friendly, professional tone. Limit responses to 50 words.`;\r\n  }\r\n\r\n  constructUserMessage(userInput) {\r\n    return `User's request: \"${userInput}\"\r\n\r\nRespond as Sam, the ${this.platform} Content Strategist. Provide specific, actionable advice related to the user's input.`;\r\n  }\r\n\r\n  postProcessResponse(response, platform) {\r\n    // Remove any part that looks like it's repeating the prompt\r\n    response = response.replace(/^(Sam:|As a professional Content Strategist for [^,]+,)/, '').trim();\r\n\r\n    // Ensure the response starts with an appropriate introduction\r\n    if (!response.startsWith(\"Here's my advice:\")) {\r\n      response = `Here's my advice: ${response}`;\r\n    }\r\n\r\n    // Truncate to 50 words if it's too long\r\n    const words = response.split(/\\s+/);\r\n    if (words.length > 50) {\r\n      response = words.slice(0, 50).join(' ') + '...';\r\n    }\r\n\r\n    // Ensure the response ends with proper punctuation\r\n    if (!/[.!?]$/.test(response)) {\r\n      response += '.';\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    // ... (keep the existing implementation)\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}