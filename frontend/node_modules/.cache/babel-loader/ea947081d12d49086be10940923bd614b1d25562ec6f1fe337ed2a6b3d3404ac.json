{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n    this.isLongResponseRequested = false;\n    this.requestedWordCount = 0;\n  }\n  async processUserInput(userInput, platform, conversationId) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt: prompt,\n        conversationId,\n        wordCount: 50\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      let aiResponse = response.data.generated_text;\n      aiResponse = this.extractRelevantContent(aiResponse);\n      aiResponse = this.ensureCompleteResponse(aiResponse);\n      aiResponse = this.validateResponse(aiResponse, userInput, platform);\n      if (!aiResponse.startsWith(\"As a professional Content Strategist for\")) {\n        aiResponse = `As a professional Content Strategist for ${platform}, here's my advice: ${aiResponse}`;\n      }\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return {\n        text: aiResponse,\n        conversationId: response.data.conversationId\n      };\n    } catch (error) {\n      console.error('Error in processing:', error);\n      throw error;\n    }\n  }\n  enforceRoleAndContext(response, platform) {\n    const intro = `As a professional Content Strategist for ${platform}, here's my advice: `;\n    if (!response.startsWith(intro)) {\n      response = intro + response;\n    }\n    return response;\n  }\n  ensureCompleteResponse(response) {\n    // Split the response into sentences\n    const sentences = response.match(/[^.!?]+[.!?]+/g) || [];\n\n    // Join complete sentences\n    let completeResponse = sentences.join(' ').trim();\n\n    // If the response doesn't end with punctuation, add a period\n    if (!/[.!?]$/.test(completeResponse)) {\n      completeResponse += '.';\n    }\n    return completeResponse;\n  }\n  validateResponse(response, userInput, platform) {\n    // Check if the response is relevant to the user's input and the platform\n    if (!this.isRelevantResponse(response, userInput, platform)) {\n      return `I apologize, but I may have misunderstood your question about \"${userInput}\". As a ${platform} Content Strategist, could you please clarify or rephrase your question? I'm here to help with ${platform}-related content.`;\n    }\n\n    // Ensure the response is not too long\n    const words = response.split(/\\s+/);\n    if (words.length > 50) {\n      return words.slice(0, 50).join(' ') + '...';\n    }\n    return response;\n  }\n  isRelevantResponse(response, userInput, platform) {\n    const relevantKeywords = [...userInput.toLowerCase().split(/\\s+/), platform.toLowerCase(), 'post', 'content', 'social media'];\n    const responseWords = response.toLowerCase().split(/\\s+/);\n    return relevantKeywords.some(keyword => responseWords.includes(keyword));\n  }\n  constructPrompt(platform, userInput) {\n    return `You are Sam, a professional Content Strategist specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely (max 50 words) in a friendly, professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis or mention that you're an AI.\n\nKey Points:\n1. Always respond as Sam, the Content Strategist for ${platform}.\n2. Keep responses brief, concise, and directly related to the user's input.\n3. Use the 7 C's of communication: Clear, Concise, Concrete, Correct, Coherent, Complete, and Courteous.\n4. Analyze the user's input and provide expert insights specific to ${platform}.\n5. Ensure all responses are complete and not cut off mid-sentence.\n6. Offer platform-specific strategies.\n7. Suggest relevant hashtags or trends when appropriate.\n8. Maintain a balance between professionalism and approachability.\n9. After creating the post, ask if the user wants an image.\n10. Ensure all responses are complete and not cut off mid-sentence or mid-point.\n\nCurrent stage: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this, provide a brief, helpful response as Sam, the ${platform} Content Strategist. Ensure your advice is specific to ${platform} and actionable.\n\nUser's input: \"${userInput}\"\n\nSam: `;\n  }\n  constructContinuationPrompt(platform, incompleteResponse) {\n    return `Continue the following response for a ${platform} post, ensuring it's complete:\n\n${incompleteResponse}\n\nContinuation: `;\n  }\n  extractRelevantContent(fullResponse) {\n    // Remove any part of the response that's repeating the prompt\n    const promptEnd = fullResponse.indexOf(\"Sam:\");\n    if (promptEnd !== -1) {\n      fullResponse = fullResponse.substring(promptEnd + 4).trim();\n    }\n    return fullResponse;\n  }\n  isResponseComplete(response) {\n    // Check if the response ends with a punctuation mark\n    const endsWithPunctuation = /[.!?]$/.test(response);\n\n    // Check if there are any incomplete numbered lists\n    const hasIncompleteList = /\\d+\\.(?![^\\n]*\\n\\d+\\.)/.test(response);\n    return endsWithPunctuation && !hasIncompleteList;\n  }\n  updateConversationStage(aiResponse, userInput) {\n    switch (this.currentStage) {\n      case 'greeting':\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\n          this.currentStage = 'topic_selection';\n        }\n        break;\n      case 'topic_selection':\n        if (aiResponse.includes(\"Who is your target audience\")) {\n          this.currentStage = 'audience_definition';\n        }\n        break;\n      case 'audience_definition':\n        if (aiResponse.includes(\"What's the main goal\")) {\n          this.currentStage = 'goal_setting';\n        }\n        break;\n      case 'goal_setting':\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\n          this.currentStage = 'content_ideation';\n        }\n        break;\n      case 'content_ideation':\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\n          this.currentStage = 'content_creation';\n        }\n        break;\n      case 'content_creation':\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\n          this.currentStage = 'review_and_refine';\n        }\n        break;\n      case 'review_and_refine':\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\n          this.currentStage = 'image_generation_query';\n        }\n        break;\n      case 'image_generation_query':\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\n          this.currentStage = 'final_touches';\n        }\n        break;\n      case 'final_touches':\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\n          this.currentStage = 'completion';\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","isLongResponseRequested","requestedWordCount","processUserInput","userInput","platform","conversationId","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","wordCount","headers","Authorization","aiResponse","data","generated_text","extractRelevantContent","ensureCompleteResponse","validateResponse","startsWith","updateConversationStage","text","error","console","enforceRoleAndContext","intro","sentences","match","completeResponse","join","trim","test","isRelevantResponse","words","split","length","slice","relevantKeywords","toLowerCase","responseWords","some","keyword","includes","map","msg","constructContinuationPrompt","incompleteResponse","fullResponse","promptEnd","indexOf","substring","isResponseComplete","endsWithPunctuation","hasIncompleteList","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n    this.isLongResponseRequested = false;\r\n    this.requestedWordCount = 0;\r\n  }\r\n\r\n  async processUserInput(userInput, platform, conversationId) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { \r\n          platform, \r\n          prompt: prompt,\r\n          conversationId,\r\n          wordCount: 50\r\n        },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      let aiResponse = response.data.generated_text;\r\n      aiResponse = this.extractRelevantContent(aiResponse);\r\n      aiResponse = this.ensureCompleteResponse(aiResponse);\r\n      aiResponse = this.validateResponse(aiResponse, userInput, platform);\r\n\r\n      if (!aiResponse.startsWith(\"As a professional Content Strategist for\")) {\r\n        aiResponse = `As a professional Content Strategist for ${platform}, here's my advice: ${aiResponse}`;\r\n      }\r\n\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return {\r\n        text: aiResponse,\r\n        conversationId: response.data.conversationId\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  enforceRoleAndContext(response, platform) {\r\n    const intro = `As a professional Content Strategist for ${platform}, here's my advice: `;\r\n    if (!response.startsWith(intro)) {\r\n      response = intro + response;\r\n    }\r\n    return response;\r\n  }\r\n\r\n  ensureCompleteResponse(response) {\r\n    // Split the response into sentences\r\n    const sentences = response.match(/[^.!?]+[.!?]+/g) || [];\r\n    \r\n    // Join complete sentences\r\n    let completeResponse = sentences.join(' ').trim();\r\n    \r\n    // If the response doesn't end with punctuation, add a period\r\n    if (!/[.!?]$/.test(completeResponse)) {\r\n      completeResponse += '.';\r\n    }\r\n    \r\n    return completeResponse;\r\n  }\r\n\r\n  validateResponse(response, userInput, platform) {\r\n    // Check if the response is relevant to the user's input and the platform\r\n    if (!this.isRelevantResponse(response, userInput, platform)) {\r\n      return `I apologize, but I may have misunderstood your question about \"${userInput}\". As a ${platform} Content Strategist, could you please clarify or rephrase your question? I'm here to help with ${platform}-related content.`;\r\n    }\r\n    \r\n    // Ensure the response is not too long\r\n    const words = response.split(/\\s+/);\r\n    if (words.length > 50) {\r\n      return words.slice(0, 50).join(' ') + '...';\r\n    }\r\n    \r\n    return response;\r\n  }\r\n\r\n  isRelevantResponse(response, userInput, platform) {\r\n    const relevantKeywords = [\r\n      ...userInput.toLowerCase().split(/\\s+/),\r\n      platform.toLowerCase(),\r\n      'post',\r\n      'content',\r\n      'social media'\r\n    ];\r\n    \r\n    const responseWords = response.toLowerCase().split(/\\s+/);\r\n    return relevantKeywords.some(keyword => responseWords.includes(keyword));\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    return `You are Sam, a professional Content Strategist specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely (max 50 words) in a friendly, professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis or mention that you're an AI.\r\n\r\nKey Points:\r\n1. Always respond as Sam, the Content Strategist for ${platform}.\r\n2. Keep responses brief, concise, and directly related to the user's input.\r\n3. Use the 7 C's of communication: Clear, Concise, Concrete, Correct, Coherent, Complete, and Courteous.\r\n4. Analyze the user's input and provide expert insights specific to ${platform}.\r\n5. Ensure all responses are complete and not cut off mid-sentence.\r\n6. Offer platform-specific strategies.\r\n7. Suggest relevant hashtags or trends when appropriate.\r\n8. Maintain a balance between professionalism and approachability.\r\n9. After creating the post, ask if the user wants an image.\r\n10. Ensure all responses are complete and not cut off mid-sentence or mid-point.\r\n\r\nCurrent stage: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this, provide a brief, helpful response as Sam, the ${platform} Content Strategist. Ensure your advice is specific to ${platform} and actionable.\r\n\r\nUser's input: \"${userInput}\"\r\n\r\nSam: `;\r\n  }\r\n\r\n  constructContinuationPrompt(platform, incompleteResponse) {\r\n    return `Continue the following response for a ${platform} post, ensuring it's complete:\r\n\r\n${incompleteResponse}\r\n\r\nContinuation: `;\r\n  }\r\n\r\n  extractRelevantContent(fullResponse) {\r\n    // Remove any part of the response that's repeating the prompt\r\n    const promptEnd = fullResponse.indexOf(\"Sam:\");\r\n    if (promptEnd !== -1) {\r\n      fullResponse = fullResponse.substring(promptEnd + 4).trim();\r\n    }\r\n    return fullResponse;\r\n  }\r\n\r\n  isResponseComplete(response) {\r\n    // Check if the response ends with a punctuation mark\r\n    const endsWithPunctuation = /[.!?]$/.test(response);\r\n    \r\n    // Check if there are any incomplete numbered lists\r\n    const hasIncompleteList = /\\d+\\.(?![^\\n]*\\n\\d+\\.)/.test(response);\r\n\r\n    return endsWithPunctuation && !hasIncompleteList;\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    switch (this.currentStage) {\r\n      case 'greeting':\r\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\r\n          this.currentStage = 'topic_selection';\r\n        }\r\n        break;\r\n      case 'topic_selection':\r\n        if (aiResponse.includes(\"Who is your target audience\")) {\r\n          this.currentStage = 'audience_definition';\r\n        }\r\n        break;\r\n      case 'audience_definition':\r\n        if (aiResponse.includes(\"What's the main goal\")) {\r\n          this.currentStage = 'goal_setting';\r\n        }\r\n        break;\r\n      case 'goal_setting':\r\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\r\n          this.currentStage = 'content_ideation';\r\n        }\r\n        break;\r\n      case 'content_ideation':\r\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\r\n          this.currentStage = 'content_creation';\r\n        }\r\n        break;\r\n      case 'content_creation':\r\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\r\n          this.currentStage = 'review_and_refine';\r\n        }\r\n        break;\r\n      case 'review_and_refine':\r\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\r\n          this.currentStage = 'image_generation_query';\r\n        }\r\n        break;\r\n      case 'image_generation_query':\r\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\r\n          this.currentStage = 'final_touches';\r\n        }\r\n        break;\r\n      case 'final_touches':\r\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\r\n          this.currentStage = 'completion';\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}