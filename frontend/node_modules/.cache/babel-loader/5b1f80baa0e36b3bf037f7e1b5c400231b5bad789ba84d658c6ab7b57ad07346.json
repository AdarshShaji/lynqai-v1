{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n  }\n  async processUserInput(userInput, platform) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = response.data.generated_text;\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      return aiResponse;\n    } catch (error) {\n      console.error('Error in AI processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform) {\n    let prompt = `You are a viral content creator and AI assistant helping to create a ${platform} post. `;\n    prompt += `Here's the conversation history:\\n\\n`;\n    this.conversationHistory.forEach(message => {\n      prompt += `${message.role}: ${message.content}\\n`;\n    });\n    prompt += `\\nBased on this conversation, provide a helpful response. If the user is asking to generate or modify a post, do so. If they're asking questions, answer them. Always maintain a friendly and professional tone.`;\n    return prompt;\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","processUserInput","userInput","platform","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","headers","Authorization","aiResponse","data","generated_text","error","console","forEach","message","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n  }\r\n\r\n  async processUserInput(userInput, platform) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      const aiResponse = response.data.generated_text;\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      return aiResponse;\r\n    } catch (error) {\r\n      console.error('Error in AI processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform) {\r\n    let prompt = `You are a viral content creator and AI assistant helping to create a ${platform} post. `;\r\n    prompt += `Here's the conversation history:\\n\\n`;\r\n\r\n    this.conversationHistory.forEach(message => {\r\n      prompt += `${message.role}: ${message.content}\\n`;\r\n    });\r\n\r\n    prompt += `\\nBased on this conversation, provide a helpful response. If the user is asking to generate or modify a post, do so. If they're asking questions, answer them. Always maintain a friendly and professional tone.`;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,eAAe;AACjC,SAASC,IAAI,QAAQ,mBAAmB;AAExC,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,mBAAmB,GAAG,EAAE;EAC/B;EAEA,MAAMC,gBAAgBA,CAACC,SAAS,EAAEC,QAAQ,EAAE;IAC1C,IAAI,CAACH,mBAAmB,CAACI,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEJ;IAAU,CAAC,CAAC;IAEnE,MAAMK,MAAM,GAAG,IAAI,CAACC,eAAe,CAACL,QAAQ,CAAC;IAE7C,IAAI;MAAA,IAAAM,iBAAA;MACF,MAAMC,KAAK,GAAG,QAAAD,iBAAA,GAAMZ,IAAI,CAACc,WAAW,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,UAAU,CAAC,CAAC;MAClD,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,gBAAgB,EAChD;QAAEX,QAAQ;QAAEI;MAAO,CAAC,EACpB;QACEQ,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUN,KAAK,EAAE;UAChC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMO,UAAU,GAAGJ,QAAQ,CAACK,IAAI,CAACC,cAAc;MAC/C,IAAI,CAACnB,mBAAmB,CAACI,IAAI,CAAC;QAAEC,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEW;MAAW,CAAC,CAAC;MAEzE,OAAOA,UAAU;IACnB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;EAEAZ,eAAeA,CAACL,QAAQ,EAAE;IACxB,IAAII,MAAM,GAAG,wEAAwEJ,QAAQ,SAAS;IACtGI,MAAM,IAAI,sCAAsC;IAEhD,IAAI,CAACP,mBAAmB,CAACsB,OAAO,CAACC,OAAO,IAAI;MAC1ChB,MAAM,IAAI,GAAGgB,OAAO,CAAClB,IAAI,KAAKkB,OAAO,CAACjB,OAAO,IAAI;IACnD,CAAC,CAAC;IAEFC,MAAM,IAAI,kNAAkN;IAE5N,OAAOA,MAAM;EACf;EAEAiB,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACxB,mBAAmB,GAAG,EAAE;EAC/B;AACF;AAEA,MAAMyB,OAAO,GAAG,IAAI3B,OAAO,CAAC,CAAC;AAC7B,eAAe2B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}