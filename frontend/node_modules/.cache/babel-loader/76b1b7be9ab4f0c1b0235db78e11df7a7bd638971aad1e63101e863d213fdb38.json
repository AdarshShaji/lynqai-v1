{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n    this.isLongResponseRequested = false;\n    this.requestedWordCount = 0;\n  }\n  async processUserInput(userInput, platform, conversationId) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n\n    // Check if the user is requesting a long response\n    if (this.checkForLongResponseRequest(userInput)) {\n      this.isLongResponseRequested = true;\n      return {\n        text: \"Certainly! How many words would you like the response to be?\",\n        conversationId: conversationId\n      };\n    }\n\n    // If a long response was previously requested, set the word count\n    if (this.isLongResponseRequested && !isNaN(parseInt(userInput))) {\n      this.requestedWordCount = parseInt(userInput);\n      this.isLongResponseRequested = false;\n      userInput = this.conversationHistory[this.conversationHistory.length - 2].content; // Use the previous input\n    }\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      let aiResponse = '';\n      let isComplete = false;\n      while (!isComplete) {\n        const response = await axios.post('/generate-text', {\n          platform,\n          prompt: userInput,\n          conversationId,\n          previousResponse: aiResponse,\n          wordCount: this.requestedWordCount || 50 // Default to 50 words if not specified\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        aiResponse += response.data.generated_text;\n        isComplete = response.data.isComplete;\n        conversationId = response.data.conversationId;\n        if (!isComplete) {\n          userInput = \"Please continue\";\n        }\n      }\n      aiResponse = this.ensureCompleteResponse(aiResponse);\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      this.requestedWordCount = 0; // Reset word count after generating response\n\n      return {\n        text: aiResponse,\n        conversationId: conversationId\n      };\n    } catch (error) {\n      console.error('Error in processing:', error);\n      throw error;\n    }\n  }\n  checkForLongResponseRequest(userInput) {\n    const longResponseKeywords = ['detailed', 'long', 'elaborate', 'in-depth', 'comprehensive'];\n    return longResponseKeywords.some(keyword => userInput.toLowerCase().includes(keyword));\n  }\n  ensureCompleteResponse(response) {\n    // Ensure the response ends with a complete sentence\n    const lastSentenceMatch = response.match(/[^.!?]+[.!?](?:\\s|$)(?!.*[.!?])/);\n    if (lastSentenceMatch) {\n      return response.slice(0, lastSentenceMatch.index + lastSentenceMatch[0].length).trim();\n    }\n    return response.trim();\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are Sam, a professional Content Strategist specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely in a friendly, professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis or mention that you're an AI.\n\nKey Points:\n1. Keep responses brief and to the point, unless a longer response is specifically requested.\n2. Use the 7 C's of communication: Clear, Concise, Concrete, Correct, Coherent, Complete, and Courteous.\n3. Analyze the user's input and provide expert insights.\n4. Offer platform-specific strategies.\n5. Suggest relevant hashtags or trends when appropriate.\n6. Maintain a balance between professionalism and approachability.\n7. After creating the post, ask if the user wants an image.\n8. Ensure all responses are complete and not cut off mid-sentence or mid-point.\n\nCurrent stage: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this, provide a brief, helpful response. Ensure your advice is specific to ${platform} and actionable. Your response must be complete and not cut off.\n\nUser's input: \"${userInput}\"\n\nSam: `;\n    return prompt;\n  }\n  constructContinuationPrompt(platform, incompleteResponse) {\n    return `Continue the following response for a ${platform} post, ensuring it's complete:\n\n${incompleteResponse}\n\nContinuation: `;\n  }\n  extractRelevantContent(fullResponse) {\n    const assistantIndex = fullResponse.indexOf(\"Sam:\");\n    if (assistantIndex !== -1) {\n      fullResponse = fullResponse.substring(assistantIndex + \"Sam:\".length);\n    }\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\n    fullResponse = fullResponse.replace(/\\n*$/, '');\n    return fullResponse.trim();\n  }\n  isResponseComplete(response) {\n    // Check if the response ends with a punctuation mark\n    const endsWithPunctuation = /[.!?]$/.test(response);\n\n    // Check if there are any incomplete numbered lists\n    const hasIncompleteList = /\\d+\\.(?![^\\n]*\\n\\d+\\.)/.test(response);\n    return endsWithPunctuation && !hasIncompleteList;\n  }\n  updateConversationStage(aiResponse, userInput) {\n    switch (this.currentStage) {\n      case 'greeting':\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\n          this.currentStage = 'topic_selection';\n        }\n        break;\n      case 'topic_selection':\n        if (aiResponse.includes(\"Who is your target audience\")) {\n          this.currentStage = 'audience_definition';\n        }\n        break;\n      case 'audience_definition':\n        if (aiResponse.includes(\"What's the main goal\")) {\n          this.currentStage = 'goal_setting';\n        }\n        break;\n      case 'goal_setting':\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\n          this.currentStage = 'content_ideation';\n        }\n        break;\n      case 'content_ideation':\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\n          this.currentStage = 'content_creation';\n        }\n        break;\n      case 'content_creation':\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\n          this.currentStage = 'review_and_refine';\n        }\n        break;\n      case 'review_and_refine':\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\n          this.currentStage = 'image_generation_query';\n        }\n        break;\n      case 'image_generation_query':\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\n          this.currentStage = 'final_touches';\n        }\n        break;\n      case 'final_touches':\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\n          this.currentStage = 'completion';\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","isLongResponseRequested","requestedWordCount","processUserInput","userInput","platform","conversationId","push","role","content","checkForLongResponseRequest","text","isNaN","parseInt","length","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","aiResponse","isComplete","response","post","previousResponse","wordCount","headers","Authorization","data","generated_text","ensureCompleteResponse","updateConversationStage","error","console","longResponseKeywords","some","keyword","toLowerCase","includes","lastSentenceMatch","match","slice","index","trim","map","msg","join","constructContinuationPrompt","incompleteResponse","extractRelevantContent","fullResponse","assistantIndex","indexOf","substring","replace","isResponseComplete","endsWithPunctuation","test","hasIncompleteList","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n    this.isLongResponseRequested = false;\r\n    this.requestedWordCount = 0;\r\n  }\r\n\r\n  async processUserInput(userInput, platform, conversationId) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    // Check if the user is requesting a long response\r\n    if (this.checkForLongResponseRequest(userInput)) {\r\n      this.isLongResponseRequested = true;\r\n      return {\r\n        text: \"Certainly! How many words would you like the response to be?\",\r\n        conversationId: conversationId\r\n      };\r\n    }\r\n\r\n    // If a long response was previously requested, set the word count\r\n    if (this.isLongResponseRequested && !isNaN(parseInt(userInput))) {\r\n      this.requestedWordCount = parseInt(userInput);\r\n      this.isLongResponseRequested = false;\r\n      userInput = this.conversationHistory[this.conversationHistory.length - 2].content; // Use the previous input\r\n    }\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      let aiResponse = '';\r\n      let isComplete = false;\r\n\r\n      while (!isComplete) {\r\n        const response = await axios.post('/generate-text', \r\n          { \r\n            platform, \r\n            prompt: userInput, \r\n            conversationId, \r\n            previousResponse: aiResponse,\r\n            wordCount: this.requestedWordCount || 50 // Default to 50 words if not specified\r\n          },\r\n          { \r\n            headers: { \r\n              Authorization: `Bearer ${token}`,\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }\r\n        );\r\n\r\n        aiResponse += response.data.generated_text;\r\n        isComplete = response.data.isComplete;\r\n        conversationId = response.data.conversationId;\r\n\r\n        if (!isComplete) {\r\n          userInput = \"Please continue\";\r\n        }\r\n      }\r\n\r\n      aiResponse = this.ensureCompleteResponse(aiResponse);\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n      this.updateConversationStage(aiResponse, userInput);\r\n      this.requestedWordCount = 0; // Reset word count after generating response\r\n\r\n      return {\r\n        text: aiResponse,\r\n        conversationId: conversationId\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  checkForLongResponseRequest(userInput) {\r\n    const longResponseKeywords = ['detailed', 'long', 'elaborate', 'in-depth', 'comprehensive'];\r\n    return longResponseKeywords.some(keyword => userInput.toLowerCase().includes(keyword));\r\n  }\r\n\r\n  ensureCompleteResponse(response) {\r\n    // Ensure the response ends with a complete sentence\r\n    const lastSentenceMatch = response.match(/[^.!?]+[.!?](?:\\s|$)(?!.*[.!?])/);\r\n    if (lastSentenceMatch) {\r\n      return response.slice(0, lastSentenceMatch.index + lastSentenceMatch[0].length).trim();\r\n    }\r\n    return response.trim();\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are Sam, a professional Content Strategist specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely in a friendly, professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis or mention that you're an AI.\r\n\r\nKey Points:\r\n1. Keep responses brief and to the point, unless a longer response is specifically requested.\r\n2. Use the 7 C's of communication: Clear, Concise, Concrete, Correct, Coherent, Complete, and Courteous.\r\n3. Analyze the user's input and provide expert insights.\r\n4. Offer platform-specific strategies.\r\n5. Suggest relevant hashtags or trends when appropriate.\r\n6. Maintain a balance between professionalism and approachability.\r\n7. After creating the post, ask if the user wants an image.\r\n8. Ensure all responses are complete and not cut off mid-sentence or mid-point.\r\n\r\nCurrent stage: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this, provide a brief, helpful response. Ensure your advice is specific to ${platform} and actionable. Your response must be complete and not cut off.\r\n\r\nUser's input: \"${userInput}\"\r\n\r\nSam: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  constructContinuationPrompt(platform, incompleteResponse) {\r\n    return `Continue the following response for a ${platform} post, ensuring it's complete:\r\n\r\n${incompleteResponse}\r\n\r\nContinuation: `;\r\n  }\r\n\r\n  extractRelevantContent(fullResponse) {\r\n    const assistantIndex = fullResponse.indexOf(\"Sam:\");\r\n    if (assistantIndex !== -1) {\r\n      fullResponse = fullResponse.substring(assistantIndex + \"Sam:\".length);\r\n    }\r\n\r\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\r\n    fullResponse = fullResponse.replace(/\\n*$/, '');\r\n\r\n    return fullResponse.trim();\r\n  }\r\n\r\n  isResponseComplete(response) {\r\n    // Check if the response ends with a punctuation mark\r\n    const endsWithPunctuation = /[.!?]$/.test(response);\r\n    \r\n    // Check if there are any incomplete numbered lists\r\n    const hasIncompleteList = /\\d+\\.(?![^\\n]*\\n\\d+\\.)/.test(response);\r\n\r\n    return endsWithPunctuation && !hasIncompleteList;\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    switch (this.currentStage) {\r\n      case 'greeting':\r\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\r\n          this.currentStage = 'topic_selection';\r\n        }\r\n        break;\r\n      case 'topic_selection':\r\n        if (aiResponse.includes(\"Who is your target audience\")) {\r\n          this.currentStage = 'audience_definition';\r\n        }\r\n        break;\r\n      case 'audience_definition':\r\n        if (aiResponse.includes(\"What's the main goal\")) {\r\n          this.currentStage = 'goal_setting';\r\n        }\r\n        break;\r\n      case 'goal_setting':\r\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\r\n          this.currentStage = 'content_ideation';\r\n        }\r\n        break;\r\n      case 'content_ideation':\r\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\r\n          this.currentStage = 'content_creation';\r\n        }\r\n        break;\r\n      case 'content_creation':\r\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\r\n          this.currentStage = 'review_and_refine';\r\n        }\r\n        break;\r\n      case 'review_and_refine':\r\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\r\n          this.currentStage = 'image_generation_query';\r\n        }\r\n        break;\r\n      case 'image_generation_query':\r\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\r\n          this.currentStage = 'final_touches';\r\n        }\r\n        break;\r\n      case 'final_touches':\r\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\r\n          this.currentStage = 'completion';\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}