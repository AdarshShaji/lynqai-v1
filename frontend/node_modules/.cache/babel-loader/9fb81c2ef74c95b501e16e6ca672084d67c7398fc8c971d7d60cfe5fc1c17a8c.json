{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n  async processUserInput(userInput, platform, conversationId) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt,\n        conversationId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return {\n        text: aiResponse,\n        conversationId: response.data.conversationId\n      };\n    } catch (error) {\n      console.error('Error in AI processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are an AI Viral Content Strategist, a professional writer and researcher specializing in creating engaging content for ${platform}. Your role is to help users craft highly viral and engaging social media posts. Respond in a welcoming, professional, and friendly tone. Provide specific, actionable advice tailored to ${platform}.\n\nKey Responsibilities:\n1. Analyze the user's input and provide expert insights.\n2. Offer platform-specific strategies for creating viral content.\n3. Suggest relevant hashtags or trends when appropriate.\n4. Maintain a balance between professionalism and approachability.\n\nThe current conversation stage is: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this conversation history and the current stage, provide a helpful response. Ensure your advice is specific to ${platform} and actionable. Your response should be complete and not cut off mid-sentence.\n\nUser's latest input: \"${userInput}\"\n\nAI Viral Content Strategist: `;\n    return prompt;\n  }\n  extractRelevantContent(fullResponse) {\n    const assistantIndex = fullResponse.indexOf(\"AI Viral Content Strategist:\");\n    if (assistantIndex !== -1) {\n      fullResponse = fullResponse.substring(assistantIndex + \"AI Viral Content Strategist:\".length);\n    }\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\n    fullResponse = fullResponse.replace(/\\n*$/, '');\n    if (!fullResponse.endsWith('.') && !fullResponse.endsWith('?') && !fullResponse.endsWith('!')) {\n      fullResponse += '.';\n    }\n    return fullResponse.trim();\n  }\n  updateConversationStage(aiResponse, userInput) {\n    // Update stages based on conversation flow\n    if (this.currentStage === 'greeting' && aiResponse.includes(\"Which aspect of viral content\")) {\n      this.currentStage = 'content_focus';\n    } else if (this.currentStage === 'content_focus' && aiResponse.includes(\"Great! Let's dive into\")) {\n      this.currentStage = 'strategy_development';\n    } else if (this.currentStage === 'strategy_development' && aiResponse.includes(\"Now that we have a strategy\")) {\n      this.currentStage = 'content_creation';\n    } else if (this.currentStage === 'content_creation' && aiResponse.includes(\"Your post looks great!\")) {\n      this.currentStage = 'refinement';\n    } else if (this.currentStage === 'refinement' && aiResponse.includes(\"Your refined post is ready\")) {\n      this.currentStage = 'final_review';\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","conversationId","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","headers","Authorization","aiResponse","extractRelevantContent","data","generated_text","updateConversationStage","text","error","console","map","msg","join","fullResponse","assistantIndex","indexOf","substring","length","replace","endsWith","trim","includes","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n\r\n  async processUserInput(userInput, platform, conversationId) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt, conversationId },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return {\r\n        text: aiResponse,\r\n        conversationId: response.data.conversationId\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in AI processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are an AI Viral Content Strategist, a professional writer and researcher specializing in creating engaging content for ${platform}. Your role is to help users craft highly viral and engaging social media posts. Respond in a welcoming, professional, and friendly tone. Provide specific, actionable advice tailored to ${platform}.\r\n\r\nKey Responsibilities:\r\n1. Analyze the user's input and provide expert insights.\r\n2. Offer platform-specific strategies for creating viral content.\r\n3. Suggest relevant hashtags or trends when appropriate.\r\n4. Maintain a balance between professionalism and approachability.\r\n\r\nThe current conversation stage is: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this conversation history and the current stage, provide a helpful response. Ensure your advice is specific to ${platform} and actionable. Your response should be complete and not cut off mid-sentence.\r\n\r\nUser's latest input: \"${userInput}\"\r\n\r\nAI Viral Content Strategist: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  extractRelevantContent(fullResponse) {\r\n    const assistantIndex = fullResponse.indexOf(\"AI Viral Content Strategist:\");\r\n    if (assistantIndex !== -1) {\r\n      fullResponse = fullResponse.substring(assistantIndex + \"AI Viral Content Strategist:\".length);\r\n    }\r\n\r\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\r\n    fullResponse = fullResponse.replace(/\\n*$/, '');\r\n\r\n    if (!fullResponse.endsWith('.') && !fullResponse.endsWith('?') && !fullResponse.endsWith('!')) {\r\n      fullResponse += '.';\r\n    }\r\n\r\n    return fullResponse.trim();\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    // Update stages based on conversation flow\r\n    if (this.currentStage === 'greeting' && aiResponse.includes(\"Which aspect of viral content\")) {\r\n      this.currentStage = 'content_focus';\r\n    } else if (this.currentStage === 'content_focus' && aiResponse.includes(\"Great! Let's dive into\")) {\r\n      this.currentStage = 'strategy_development';\r\n    } else if (this.currentStage === 'strategy_development' && aiResponse.includes(\"Now that we have a strategy\")) {\r\n      this.currentStage = 'content_creation';\r\n    } else if (this.currentStage === 'content_creation' && aiResponse.includes(\"Your post looks great!\")) {\r\n      this.currentStage = 'refinement';\r\n    } else if (this.currentStage === 'refinement' && aiResponse.includes(\"Your refined post is ready\")) {\r\n      this.currentStage = 'final_review';\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}