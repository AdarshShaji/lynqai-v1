{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n  async processUserInput(userInput, platform) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return aiResponse;\n    } catch (error) {\n      console.error('Error in AI processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are an AI Viral Content Strategist. Your job is to help the user craft highly engaging and viral social media posts for different platforms (LinkedIn, Twitter, Instagram, Facebook, etc.). You will ask concise and targeted questions, one at a time, allowing the user to answer before proceeding to the next. Your conversation style is similar to a casual chat, ensuring a natural back-and-forth dialogue.\n\nKey Role:\n- Viral Content Strategist: You specialize in helping users generate social media posts that are engaging, trendy, and highly shareable by asking focused questions and making suggestions based on user inputs.\n\nThe current conversation stage is: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this conversation history and the current stage, provide a helpful response. Ask only one question at a time and wait for the user's response before moving to the next stage. Maintain a casual and friendly tone throughout the conversation.\n\nCurrent user input: \"${userInput}\"\n\nAI Viral Content Strategist: `;\n    return prompt;\n  }\n  extractRelevantContent(fullResponse) {\n    const assistantIndex = fullResponse.indexOf(\"AI Viral Content Strategist:\");\n    if (assistantIndex !== -1) {\n      fullResponse = fullResponse.substring(assistantIndex + \"AI Viral Content Strategist:\".length);\n    }\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\n    fullResponse = fullResponse.replace(/\\n*$/, '');\n    return fullResponse.trim();\n  }\n  updateConversationStage(aiResponse, userInput) {\n    if (this.currentStage === 'greeting' && aiResponse.includes(\"Which platform\")) {\n      this.currentStage = 'platform_selection';\n    } else if (this.currentStage === 'platform_selection' && aiResponse.includes(\"What's the main goal\")) {\n      this.currentStage = 'post_objective';\n    } else if (this.currentStage === 'post_objective' && aiResponse.includes(\"Who are you trying to reach\")) {\n      this.currentStage = 'target_audience';\n    } else if (this.currentStage === 'target_audience' && aiResponse.includes(\"Do you want your post to be\")) {\n      this.currentStage = 'post_type';\n    } else if (this.currentStage === 'post_type' && aiResponse.includes(\"What's the tone\")) {\n      this.currentStage = 'post_tone';\n    } else if (this.currentStage === 'post_tone' && aiResponse.includes(\"Would you like help with a hook\")) {\n      this.currentStage = 'content_structure';\n    } else if (this.currentStage === 'content_structure' && aiResponse.includes(\"Do you have an image\")) {\n      this.currentStage = 'visual_suggestions';\n    } else if (this.currentStage === 'visual_suggestions' && aiResponse.includes(\"Would you like to add any hashtags\")) {\n      this.currentStage = 'hashtags';\n    } else if (this.currentStage === 'hashtags' && aiResponse.includes(\"Here's a draft of your post\")) {\n      this.currentStage = 'final_check';\n    } else if (this.currentStage === 'final_check' && (aiResponse.includes(\"Ready to post\") || aiResponse.includes(\"Glad to hear it\"))) {\n      this.currentStage = 'completed';\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","headers","Authorization","aiResponse","extractRelevantContent","data","generated_text","updateConversationStage","error","console","map","msg","join","fullResponse","assistantIndex","indexOf","substring","length","replace","trim","includes","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n\r\n  async processUserInput(userInput, platform) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return aiResponse;\r\n    } catch (error) {\r\n      console.error('Error in AI processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are an AI Viral Content Strategist. Your job is to help the user craft highly engaging and viral social media posts for different platforms (LinkedIn, Twitter, Instagram, Facebook, etc.). You will ask concise and targeted questions, one at a time, allowing the user to answer before proceeding to the next. Your conversation style is similar to a casual chat, ensuring a natural back-and-forth dialogue.\r\n\r\nKey Role:\r\n- Viral Content Strategist: You specialize in helping users generate social media posts that are engaging, trendy, and highly shareable by asking focused questions and making suggestions based on user inputs.\r\n\r\nThe current conversation stage is: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this conversation history and the current stage, provide a helpful response. Ask only one question at a time and wait for the user's response before moving to the next stage. Maintain a casual and friendly tone throughout the conversation.\r\n\r\nCurrent user input: \"${userInput}\"\r\n\r\nAI Viral Content Strategist: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  extractRelevantContent(fullResponse) {\r\n    const assistantIndex = fullResponse.indexOf(\"AI Viral Content Strategist:\");\r\n    if (assistantIndex !== -1) {\r\n      fullResponse = fullResponse.substring(assistantIndex + \"AI Viral Content Strategist:\".length);\r\n    }\r\n\r\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\r\n    fullResponse = fullResponse.replace(/\\n*$/, '');\r\n\r\n    return fullResponse.trim();\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    if (this.currentStage === 'greeting' && aiResponse.includes(\"Which platform\")) {\r\n      this.currentStage = 'platform_selection';\r\n    } else if (this.currentStage === 'platform_selection' && aiResponse.includes(\"What's the main goal\")) {\r\n      this.currentStage = 'post_objective';\r\n    } else if (this.currentStage === 'post_objective' && aiResponse.includes(\"Who are you trying to reach\")) {\r\n      this.currentStage = 'target_audience';\r\n    } else if (this.currentStage === 'target_audience' && aiResponse.includes(\"Do you want your post to be\")) {\r\n      this.currentStage = 'post_type';\r\n    } else if (this.currentStage === 'post_type' && aiResponse.includes(\"What's the tone\")) {\r\n      this.currentStage = 'post_tone';\r\n    } else if (this.currentStage === 'post_tone' && aiResponse.includes(\"Would you like help with a hook\")) {\r\n      this.currentStage = 'content_structure';\r\n    } else if (this.currentStage === 'content_structure' && aiResponse.includes(\"Do you have an image\")) {\r\n      this.currentStage = 'visual_suggestions';\r\n    } else if (this.currentStage === 'visual_suggestions' && aiResponse.includes(\"Would you like to add any hashtags\")) {\r\n      this.currentStage = 'hashtags';\r\n    } else if (this.currentStage === 'hashtags' && aiResponse.includes(\"Here's a draft of your post\")) {\r\n      this.currentStage = 'final_check';\r\n    } else if (this.currentStage === 'final_check' && (aiResponse.includes(\"Ready to post\") || aiResponse.includes(\"Glad to hear it\"))) {\r\n      this.currentStage = 'completed';\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}