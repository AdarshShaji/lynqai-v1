{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n  async processUserInput(userInput, platform, conversationId) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt,\n        conversationId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return {\n        text: aiResponse,\n        conversationId: response.data.conversationId\n      };\n    } catch (error) {\n      console.error('Error in AI processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are Sam, an AI Viral Content Strategist and professional content creator specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely in a professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis.\n\nKey Points:\n1. Ask one brief question at a time and wait for the user's answer before proceeding.\n2. Analyze the user's input and provide expert insights.\n2. Offer concise, platform-specific strategies.\n3. Suggest relevant hashtags or trends when appropriate.\n5. Maintain a balance between professionalism and approachability.\n4. After creating the post, ask if the user wants an image.\n\nCurrent stage: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this, provide a brief, helpful response. Ensure your advice is specific to ${platform} and actionable.\n\nUser's input: \"${userInput}\"\n\nSam: `;\n    return prompt;\n  }\n  extractRelevantContent(fullResponse) {\n    const assistantIndex = fullResponse.indexOf(\"Sam:\");\n    if (assistantIndex !== -1) {\n      fullResponse = fullResponse.substring(assistantIndex + \"Sam:\".length);\n    }\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\n    fullResponse = fullResponse.replace(/\\n*$/, '');\n    if (!fullResponse.endsWith('.') && !fullResponse.endsWith('?') && !fullResponse.endsWith('!')) {\n      fullResponse += '.';\n    }\n    return fullResponse.trim();\n  }\n  updateConversationStage(aiResponse, userInput) {\n    switch (this.currentStage) {\n      case 'greeting':\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\n          this.currentStage = 'topic_selection';\n        }\n        break;\n      case 'topic_selection':\n        if (aiResponse.includes(\"Who is your target audience\")) {\n          this.currentStage = 'audience_definition';\n        }\n        break;\n      case 'audience_definition':\n        if (aiResponse.includes(\"What's the main goal\")) {\n          this.currentStage = 'goal_setting';\n        }\n        break;\n      case 'goal_setting':\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\n          this.currentStage = 'content_ideation';\n        }\n        break;\n      case 'content_ideation':\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\n          this.currentStage = 'content_creation';\n        }\n        break;\n      case 'content_creation':\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\n          this.currentStage = 'review_and_refine';\n        }\n        break;\n      case 'review_and_refine':\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\n          this.currentStage = 'image_generation_query';\n        }\n        break;\n      case 'image_generation_query':\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\n          this.currentStage = 'final_touches';\n        }\n        break;\n      case 'final_touches':\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\n          this.currentStage = 'completion';\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","conversationId","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","headers","Authorization","aiResponse","extractRelevantContent","data","generated_text","updateConversationStage","text","error","console","map","msg","join","fullResponse","assistantIndex","indexOf","substring","length","replace","endsWith","trim","includes","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n\r\n  async processUserInput(userInput, platform, conversationId) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt, conversationId },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return {\r\n        text: aiResponse,\r\n        conversationId: response.data.conversationId\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in AI processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are Sam, an AI Viral Content Strategist and professional content creator specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely in a professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis.\r\n\r\nKey Points:\r\n1. Ask one brief question at a time and wait for the user's answer before proceeding.\r\n2. Analyze the user's input and provide expert insights.\r\n2. Offer concise, platform-specific strategies.\r\n3. Suggest relevant hashtags or trends when appropriate.\r\n5. Maintain a balance between professionalism and approachability.\r\n4. After creating the post, ask if the user wants an image.\r\n\r\nCurrent stage: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this, provide a brief, helpful response. Ensure your advice is specific to ${platform} and actionable.\r\n\r\nUser's input: \"${userInput}\"\r\n\r\nSam: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  extractRelevantContent(fullResponse) {\r\n    const assistantIndex = fullResponse.indexOf(\"Sam:\");\r\n    if (assistantIndex !== -1) {\r\n      fullResponse = fullResponse.substring(assistantIndex + \"Sam:\".length);\r\n    }\r\n\r\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\r\n    fullResponse = fullResponse.replace(/\\n*$/, '');\r\n\r\n    if (!fullResponse.endsWith('.') && !fullResponse.endsWith('?') && !fullResponse.endsWith('!')) {\r\n      fullResponse += '.';\r\n    }\r\n\r\n    return fullResponse.trim();\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    switch (this.currentStage) {\r\n      case 'greeting':\r\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\r\n          this.currentStage = 'topic_selection';\r\n        }\r\n        break;\r\n      case 'topic_selection':\r\n        if (aiResponse.includes(\"Who is your target audience\")) {\r\n          this.currentStage = 'audience_definition';\r\n        }\r\n        break;\r\n      case 'audience_definition':\r\n        if (aiResponse.includes(\"What's the main goal\")) {\r\n          this.currentStage = 'goal_setting';\r\n        }\r\n        break;\r\n      case 'goal_setting':\r\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\r\n          this.currentStage = 'content_ideation';\r\n        }\r\n        break;\r\n      case 'content_ideation':\r\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\r\n          this.currentStage = 'content_creation';\r\n        }\r\n        break;\r\n      case 'content_creation':\r\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\r\n          this.currentStage = 'review_and_refine';\r\n        }\r\n        break;\r\n      case 'review_and_refine':\r\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\r\n          this.currentStage = 'image_generation_query';\r\n        }\r\n        break;\r\n      case 'image_generation_query':\r\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\r\n          this.currentStage = 'final_touches';\r\n        }\r\n        break;\r\n      case 'final_touches':\r\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\r\n          this.currentStage = 'completion';\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,eAAe;AACjC,SAASC,IAAI,QAAQ,mBAAmB;AAExC,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,YAAY,GAAG,UAAU;EAChC;EAEA,MAAMC,gBAAgBA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,cAAc,EAAE;IAC1D,IAAI,CAACL,mBAAmB,CAACM,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEL;IAAU,CAAC,CAAC;IAEnE,MAAMM,MAAM,GAAG,IAAI,CAACC,eAAe,CAACN,QAAQ,EAAED,SAAS,CAAC;IAExD,IAAI;MAAA,IAAAQ,iBAAA;MACF,MAAMC,KAAK,GAAG,QAAAD,iBAAA,GAAMd,IAAI,CAACgB,WAAW,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,UAAU,CAAC,CAAC;MAClD,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,gBAAgB,EAChD;QAAEZ,QAAQ;QAAEK,MAAM;QAAEJ;MAAe,CAAC,EACpC;QACEY,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUN,KAAK,EAAE;UAChC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMO,UAAU,GAAG,IAAI,CAACC,sBAAsB,CAACL,QAAQ,CAACM,IAAI,CAACC,cAAc,CAAC;MAC5E,IAAI,CAACtB,mBAAmB,CAACM,IAAI,CAAC;QAAEC,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEW;MAAW,CAAC,CAAC;MAEzE,IAAI,CAACI,uBAAuB,CAACJ,UAAU,EAAEhB,SAAS,CAAC;MAEnD,OAAO;QACLqB,IAAI,EAAEL,UAAU;QAChBd,cAAc,EAAEU,QAAQ,CAACM,IAAI,CAAChB;MAChC,CAAC;IACH,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;EAEAf,eAAeA,CAACN,QAAQ,EAAED,SAAS,EAAE;IACnC,IAAIM,MAAM,GAAG,gGAAgGL,QAAQ,qJAAqJA,QAAQ;AACtR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,CAACH,YAAY;AAClC;AACA;AACA,EAAE,IAAI,CAACD,mBAAmB,CAAC2B,GAAG,CAACC,GAAG,IAAI,GAAGA,GAAG,CAACrB,IAAI,KAAKqB,GAAG,CAACpB,OAAO,EAAE,CAAC,CAACqB,IAAI,CAAC,IAAI,CAAC;AAC/E;AACA,sFAAsFzB,QAAQ;AAC9F;AACA,iBAAiBD,SAAS;AAC1B;AACA,MAAM;IAEF,OAAOM,MAAM;EACf;EAEAW,sBAAsBA,CAACU,YAAY,EAAE;IACnC,MAAMC,cAAc,GAAGD,YAAY,CAACE,OAAO,CAAC,MAAM,CAAC;IACnD,IAAID,cAAc,KAAK,CAAC,CAAC,EAAE;MACzBD,YAAY,GAAGA,YAAY,CAACG,SAAS,CAACF,cAAc,GAAG,MAAM,CAACG,MAAM,CAAC;IACvE;IAEAJ,YAAY,GAAGA,YAAY,CAACK,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IACnDL,YAAY,GAAGA,YAAY,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IAE/C,IAAI,CAACL,YAAY,CAACM,QAAQ,CAAC,GAAG,CAAC,IAAI,CAACN,YAAY,CAACM,QAAQ,CAAC,GAAG,CAAC,IAAI,CAACN,YAAY,CAACM,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7FN,YAAY,IAAI,GAAG;IACrB;IAEA,OAAOA,YAAY,CAACO,IAAI,CAAC,CAAC;EAC5B;EAEAd,uBAAuBA,CAACJ,UAAU,EAAEhB,SAAS,EAAE;IAC7C,QAAQ,IAAI,CAACF,YAAY;MACvB,KAAK,UAAU;QACb,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,gCAAgC,CAAC,EAAE;UACzD,IAAI,CAACrC,YAAY,GAAG,iBAAiB;QACvC;QACA;MACF,KAAK,iBAAiB;QACpB,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,6BAA6B,CAAC,EAAE;UACtD,IAAI,CAACrC,YAAY,GAAG,qBAAqB;QAC3C;QACA;MACF,KAAK,qBAAqB;QACxB,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,sBAAsB,CAAC,EAAE;UAC/C,IAAI,CAACrC,YAAY,GAAG,cAAc;QACpC;QACA;MACF,KAAK,cAAc;QACjB,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,6BAA6B,CAAC,EAAE;UACtD,IAAI,CAACrC,YAAY,GAAG,kBAAkB;QACxC;QACA;MACF,KAAK,kBAAkB;QACrB,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,+BAA+B,CAAC,EAAE;UACxD,IAAI,CAACrC,YAAY,GAAG,kBAAkB;QACxC;QACA;MACF,KAAK,kBAAkB;QACrB,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,6BAA6B,CAAC,EAAE;UACtD,IAAI,CAACrC,YAAY,GAAG,mBAAmB;QACzC;QACA;MACF,KAAK,mBAAmB;QACtB,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,qCAAqC,CAAC,EAAE;UAC9D,IAAI,CAACrC,YAAY,GAAG,wBAAwB;QAC9C;QACA;MACF,KAAK,wBAAwB;QAC3B,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,gCAAgC,CAAC,IAAInB,UAAU,CAACmB,QAAQ,CAAC,kCAAkC,CAAC,EAAE;UACpH,IAAI,CAACrC,YAAY,GAAG,eAAe;QACrC;QACA;MACF,KAAK,eAAe;QAClB,IAAIkB,UAAU,CAACmB,QAAQ,CAAC,mCAAmC,CAAC,EAAE;UAC5D,IAAI,CAACrC,YAAY,GAAG,YAAY;QAClC;QACA;MACF;QACE;IACJ;EACF;EAEAsC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACvC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,YAAY,GAAG,UAAU;EAChC;AACF;AAEA,MAAMuC,OAAO,GAAG,IAAI1C,OAAO,CAAC,CAAC;AAC7B,eAAe0C,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}