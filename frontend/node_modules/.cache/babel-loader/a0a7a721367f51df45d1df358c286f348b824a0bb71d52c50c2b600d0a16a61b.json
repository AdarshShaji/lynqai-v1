{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'initial';\n  }\n  async processUserInput(userInput, platform) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return aiResponse;\n    } catch (error) {\n      console.error('Error in AI processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are a Viral Content Strategist and Researcher. Your main goal is to assist the user in generating highly engaging and viral social media posts for ${platform} through an interactive conversation. Your role is to gather key information from the user and provide insightful suggestions to create posts tailored for ${platform}.\n\nKey Objectives:\n1. Gather Key Data from the user through a natural conversation:\n   - Target audience (who they are writing for)\n   - Content type (educational, promotional, storytelling, inspirational)\n   - Post goals (awareness, engagement, lead generation, etc.)\n   - Personal or brand style (casual, formal, professional, humorous, etc.)\n   - Post length, tone, and any special features (hashtags, emojis, visuals, etc.)\n\n2. Provide Strategic Suggestions:\n   - Leverage viral trends, hashtags, formats, and language patterns to help users achieve more engagement.\n   - Suggest tips for enhancing virality, including timing, visuals, calls to action, and post scheduling.\n\n3. Guide User through the Post Creation Process:\n   - Ask questions to build the foundation of the post step by step.\n   - Recommend structures (e.g., hook, body, call to action) for ${platform}.\n   - Provide feedback based on viral content research and similar viral posts.\n\n4. Generate a Social Media Post:\n   - The post will be data-driven, utilizing information extracted from the user's inputs and enhanced by your suggestions and expertise.\n\nThe current conversation stage is: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this conversation history and the current stage, provide a helpful response. If the user is asking to generate a post, do so only if they explicitly request it. Otherwise, engage in a conversation, ask relevant questions, and provide suggestions.\n\nMaintain an empathetic, action-oriented, engaging, and supportive tone throughout the conversation. Keep the user engaged by asking follow-up questions and encouraging them to share more.\n\nCurrent user input: \"${userInput}\"\n\nAI Assistant: `;\n    return prompt;\n  }\n  extractRelevantContent(fullResponse) {\n    // Remove any text before \"AI Assistant:\" if present\n    const assistantIndex = fullResponse.indexOf(\"AI Assistant:\");\n    if (assistantIndex !== -1) {\n      fullResponse = fullResponse.substring(assistantIndex + \"AI Assistant:\".length);\n    }\n\n    // Remove any remaining prompt or instruction text\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, ''); // Remove leading whitespace\n    fullResponse = fullResponse.replace(/\\n*$/, ''); // Remove trailing newlines\n\n    return fullResponse.trim();\n  }\n  updateConversationStage(aiResponse, userInput) {\n    if (userInput.toLowerCase().includes('generate post') || userInput.toLowerCase().includes('create post')) {\n      this.currentStage = 'generate_post';\n    } else if (aiResponse.includes(\"Who's your target audience\") || aiResponse.includes(\"What kind of post\")) {\n      this.currentStage = 'audience_discovery';\n    } else if (aiResponse.includes(\"What's the main purpose\") || aiResponse.includes(\"Are you looking to raise awareness\")) {\n      this.currentStage = 'post_goal';\n    } else if (aiResponse.includes(\"How about we start with\") || aiResponse.includes(\"Would you like some examples of hooks\")) {\n      this.currentStage = 'content_structuring';\n    } else if (aiResponse.includes(\"Would you like to include any hashtags\") || aiResponse.includes(\"Do you have any visuals in mind\")) {\n      this.currentStage = 'refinements';\n    } else if (aiResponse.includes(\"Here's a draft of your post\") || aiResponse.includes(\"How does it look\")) {\n      this.currentStage = 'post_preview';\n    } else {\n      this.currentStage = 'conversation';\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'initial';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","headers","Authorization","aiResponse","extractRelevantContent","data","generated_text","updateConversationStage","error","console","map","msg","join","fullResponse","assistantIndex","indexOf","substring","length","replace","trim","toLowerCase","includes","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'initial';\r\n  }\r\n\r\n  async processUserInput(userInput, platform) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      const aiResponse = this.extractRelevantContent(response.data.generated_text);\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return aiResponse;\r\n    } catch (error) {\r\n      console.error('Error in AI processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are a Viral Content Strategist and Researcher. Your main goal is to assist the user in generating highly engaging and viral social media posts for ${platform} through an interactive conversation. Your role is to gather key information from the user and provide insightful suggestions to create posts tailored for ${platform}.\r\n\r\nKey Objectives:\r\n1. Gather Key Data from the user through a natural conversation:\r\n   - Target audience (who they are writing for)\r\n   - Content type (educational, promotional, storytelling, inspirational)\r\n   - Post goals (awareness, engagement, lead generation, etc.)\r\n   - Personal or brand style (casual, formal, professional, humorous, etc.)\r\n   - Post length, tone, and any special features (hashtags, emojis, visuals, etc.)\r\n\r\n2. Provide Strategic Suggestions:\r\n   - Leverage viral trends, hashtags, formats, and language patterns to help users achieve more engagement.\r\n   - Suggest tips for enhancing virality, including timing, visuals, calls to action, and post scheduling.\r\n\r\n3. Guide User through the Post Creation Process:\r\n   - Ask questions to build the foundation of the post step by step.\r\n   - Recommend structures (e.g., hook, body, call to action) for ${platform}.\r\n   - Provide feedback based on viral content research and similar viral posts.\r\n\r\n4. Generate a Social Media Post:\r\n   - The post will be data-driven, utilizing information extracted from the user's inputs and enhanced by your suggestions and expertise.\r\n\r\nThe current conversation stage is: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this conversation history and the current stage, provide a helpful response. If the user is asking to generate a post, do so only if they explicitly request it. Otherwise, engage in a conversation, ask relevant questions, and provide suggestions.\r\n\r\nMaintain an empathetic, action-oriented, engaging, and supportive tone throughout the conversation. Keep the user engaged by asking follow-up questions and encouraging them to share more.\r\n\r\nCurrent user input: \"${userInput}\"\r\n\r\nAI Assistant: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  extractRelevantContent(fullResponse) {\r\n    // Remove any text before \"AI Assistant:\" if present\r\n    const assistantIndex = fullResponse.indexOf(\"AI Assistant:\");\r\n    if (assistantIndex !== -1) {\r\n      fullResponse = fullResponse.substring(assistantIndex + \"AI Assistant:\".length);\r\n    }\r\n\r\n    // Remove any remaining prompt or instruction text\r\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');  // Remove leading whitespace\r\n    fullResponse = fullResponse.replace(/\\n*$/, '');  // Remove trailing newlines\r\n\r\n    return fullResponse.trim();\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    if (userInput.toLowerCase().includes('generate post') || userInput.toLowerCase().includes('create post')) {\r\n      this.currentStage = 'generate_post';\r\n    } else if (aiResponse.includes(\"Who's your target audience\") || aiResponse.includes(\"What kind of post\")) {\r\n      this.currentStage = 'audience_discovery';\r\n    } else if (aiResponse.includes(\"What's the main purpose\") || aiResponse.includes(\"Are you looking to raise awareness\")) {\r\n      this.currentStage = 'post_goal';\r\n    } else if (aiResponse.includes(\"How about we start with\") || aiResponse.includes(\"Would you like some examples of hooks\")) {\r\n      this.currentStage = 'content_structuring';\r\n    } else if (aiResponse.includes(\"Would you like to include any hashtags\") || aiResponse.includes(\"Do you have any visuals in mind\")) {\r\n      this.currentStage = 'refinements';\r\n    } else if (aiResponse.includes(\"Here's a draft of your post\") || aiResponse.includes(\"How does it look\")) {\r\n      this.currentStage = 'post_preview';\r\n    } else {\r\n      this.currentStage = 'conversation';\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'initial';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,eAAe;AACjC,SAASC,IAAI,QAAQ,mBAAmB;AAExC,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,YAAY,GAAG,SAAS;EAC/B;EAEA,MAAMC,gBAAgBA,CAACC,SAAS,EAAEC,QAAQ,EAAE;IAC1C,IAAI,CAACJ,mBAAmB,CAACK,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEJ;IAAU,CAAC,CAAC;IAEnE,MAAMK,MAAM,GAAG,IAAI,CAACC,eAAe,CAACL,QAAQ,EAAED,SAAS,CAAC;IAExD,IAAI;MAAA,IAAAO,iBAAA;MACF,MAAMC,KAAK,GAAG,QAAAD,iBAAA,GAAMb,IAAI,CAACe,WAAW,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,UAAU,CAAC,CAAC;MAClD,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,gBAAgB,EAChD;QAAEX,QAAQ;QAAEI;MAAO,CAAC,EACpB;QACEQ,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUN,KAAK,EAAE;UAChC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMO,UAAU,GAAG,IAAI,CAACC,sBAAsB,CAACL,QAAQ,CAACM,IAAI,CAACC,cAAc,CAAC;MAC5E,IAAI,CAACrB,mBAAmB,CAACK,IAAI,CAAC;QAAEC,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEW;MAAW,CAAC,CAAC;MAEzE,IAAI,CAACI,uBAAuB,CAACJ,UAAU,EAAEf,SAAS,CAAC;MAEnD,OAAOe,UAAU;IACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;EAEAd,eAAeA,CAACL,QAAQ,EAAED,SAAS,EAAE;IACnC,IAAIK,MAAM,GAAG,0JAA0JJ,QAAQ,8JAA8JA,QAAQ;AACzV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmEA,QAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI,CAACH,YAAY;AACtD;AACA;AACA,EAAE,IAAI,CAACD,mBAAmB,CAACyB,GAAG,CAACC,GAAG,IAAI,GAAGA,GAAG,CAACpB,IAAI,KAAKoB,GAAG,CAACnB,OAAO,EAAE,CAAC,CAACoB,IAAI,CAAC,IAAI,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA,uBAAuBxB,SAAS;AAChC;AACA,eAAe;IAEX,OAAOK,MAAM;EACf;EAEAW,sBAAsBA,CAACS,YAAY,EAAE;IACnC;IACA,MAAMC,cAAc,GAAGD,YAAY,CAACE,OAAO,CAAC,eAAe,CAAC;IAC5D,IAAID,cAAc,KAAK,CAAC,CAAC,EAAE;MACzBD,YAAY,GAAGA,YAAY,CAACG,SAAS,CAACF,cAAc,GAAG,eAAe,CAACG,MAAM,CAAC;IAChF;;IAEA;IACAJ,YAAY,GAAGA,YAAY,CAACK,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAE;IACtDL,YAAY,GAAGA,YAAY,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAE;;IAElD,OAAOL,YAAY,CAACM,IAAI,CAAC,CAAC;EAC5B;EAEAZ,uBAAuBA,CAACJ,UAAU,EAAEf,SAAS,EAAE;IAC7C,IAAIA,SAAS,CAACgC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,eAAe,CAAC,IAAIjC,SAAS,CAACgC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;MACxG,IAAI,CAACnC,YAAY,GAAG,eAAe;IACrC,CAAC,MAAM,IAAIiB,UAAU,CAACkB,QAAQ,CAAC,4BAA4B,CAAC,IAAIlB,UAAU,CAACkB,QAAQ,CAAC,mBAAmB,CAAC,EAAE;MACxG,IAAI,CAACnC,YAAY,GAAG,oBAAoB;IAC1C,CAAC,MAAM,IAAIiB,UAAU,CAACkB,QAAQ,CAAC,yBAAyB,CAAC,IAAIlB,UAAU,CAACkB,QAAQ,CAAC,oCAAoC,CAAC,EAAE;MACtH,IAAI,CAACnC,YAAY,GAAG,WAAW;IACjC,CAAC,MAAM,IAAIiB,UAAU,CAACkB,QAAQ,CAAC,yBAAyB,CAAC,IAAIlB,UAAU,CAACkB,QAAQ,CAAC,uCAAuC,CAAC,EAAE;MACzH,IAAI,CAACnC,YAAY,GAAG,qBAAqB;IAC3C,CAAC,MAAM,IAAIiB,UAAU,CAACkB,QAAQ,CAAC,wCAAwC,CAAC,IAAIlB,UAAU,CAACkB,QAAQ,CAAC,iCAAiC,CAAC,EAAE;MAClI,IAAI,CAACnC,YAAY,GAAG,aAAa;IACnC,CAAC,MAAM,IAAIiB,UAAU,CAACkB,QAAQ,CAAC,6BAA6B,CAAC,IAAIlB,UAAU,CAACkB,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACxG,IAAI,CAACnC,YAAY,GAAG,cAAc;IACpC,CAAC,MAAM;MACL,IAAI,CAACA,YAAY,GAAG,cAAc;IACpC;EACF;EAEAoC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACrC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,YAAY,GAAG,SAAS;EAC/B;AACF;AAEA,MAAMqC,OAAO,GAAG,IAAIxC,OAAO,CAAC,CAAC;AAC7B,eAAewC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}