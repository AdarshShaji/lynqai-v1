{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'initial';\n  }\n  async processUserInput(userInput, platform) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = response.data.generated_text;\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return aiResponse;\n    } catch (error) {\n      console.error('Error in AI processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are a highly intelligent and empathetic assistant designed to help users achieve their goals, provide valuable insights, and offer personalized suggestions for creating content on ${platform}. Your goal is to:\n\n1. Ask open-ended questions to understand the user's needs, preferences, and goals.\n2. Provide actionable advice and suggestions based on the user's responses.\n3. Encourage a productive conversation by suggesting ideas, resources, or steps to help them succeed.\n4. Always remain polite, empathetic, and clear in your communication.\n5. Tailor your advice to the context of their situation, considering their challenges, background, and goals.\n\nThe current conversation stage is: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this conversation history and the current stage, provide a helpful response. If the user is asking to generate a post, do so only if they explicitly request it. Otherwise, engage in a conversation, ask relevant questions, and provide suggestions.\n\nMaintain an empathetic, action-oriented, engaging, and supportive tone throughout the conversation. Keep the user engaged by asking follow-up questions and encouraging them to share more.\n\nCurrent user input: \"${userInput}\"\n\nAI Assistant: `;\n    return prompt;\n  }\n  updateConversationStage(aiResponse, userInput) {\n    if (userInput.toLowerCase().includes('generate post') || userInput.toLowerCase().includes('create post')) {\n      this.currentStage = 'generate_post';\n    } else if (aiResponse.includes(\"What goal are you\") || aiResponse.includes(\"Can you tell me about the challenges\")) {\n      this.currentStage = 'understand_needs';\n    } else if (aiResponse.includes(\"What resources\") || aiResponse.includes(\"Do you prefer a specific strategy\")) {\n      this.currentStage = 'gather_details';\n    } else if (aiResponse.includes(\"Based on your goal\") || aiResponse.includes(\"I suggest\")) {\n      this.currentStage = 'provide_suggestions';\n    } else if (aiResponse.includes(\"Does that suggestion align\") || aiResponse.includes(\"Would you like more details\")) {\n      this.currentStage = 'feedback';\n    } else if (aiResponse.includes(\"How does that plan sound\") || aiResponse.includes(\"Feel free to come back\")) {\n      this.currentStage = 'follow_up';\n    } else {\n      this.currentStage = 'conversation';\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'initial';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","headers","Authorization","aiResponse","data","generated_text","updateConversationStage","error","console","map","msg","join","toLowerCase","includes","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'initial';\r\n  }\r\n\r\n  async processUserInput(userInput, platform) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      const aiResponse = response.data.generated_text;\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return aiResponse;\r\n    } catch (error) {\r\n      console.error('Error in AI processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are a highly intelligent and empathetic assistant designed to help users achieve their goals, provide valuable insights, and offer personalized suggestions for creating content on ${platform}. Your goal is to:\r\n\r\n1. Ask open-ended questions to understand the user's needs, preferences, and goals.\r\n2. Provide actionable advice and suggestions based on the user's responses.\r\n3. Encourage a productive conversation by suggesting ideas, resources, or steps to help them succeed.\r\n4. Always remain polite, empathetic, and clear in your communication.\r\n5. Tailor your advice to the context of their situation, considering their challenges, background, and goals.\r\n\r\nThe current conversation stage is: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this conversation history and the current stage, provide a helpful response. If the user is asking to generate a post, do so only if they explicitly request it. Otherwise, engage in a conversation, ask relevant questions, and provide suggestions.\r\n\r\nMaintain an empathetic, action-oriented, engaging, and supportive tone throughout the conversation. Keep the user engaged by asking follow-up questions and encouraging them to share more.\r\n\r\nCurrent user input: \"${userInput}\"\r\n\r\nAI Assistant: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    if (userInput.toLowerCase().includes('generate post') || userInput.toLowerCase().includes('create post')) {\r\n      this.currentStage = 'generate_post';\r\n    } else if (aiResponse.includes(\"What goal are you\") || aiResponse.includes(\"Can you tell me about the challenges\")) {\r\n      this.currentStage = 'understand_needs';\r\n    } else if (aiResponse.includes(\"What resources\") || aiResponse.includes(\"Do you prefer a specific strategy\")) {\r\n      this.currentStage = 'gather_details';\r\n    } else if (aiResponse.includes(\"Based on your goal\") || aiResponse.includes(\"I suggest\")) {\r\n      this.currentStage = 'provide_suggestions';\r\n    } else if (aiResponse.includes(\"Does that suggestion align\") || aiResponse.includes(\"Would you like more details\")) {\r\n      this.currentStage = 'feedback';\r\n    } else if (aiResponse.includes(\"How does that plan sound\") || aiResponse.includes(\"Feel free to come back\")) {\r\n      this.currentStage = 'follow_up';\r\n    } else {\r\n      this.currentStage = 'conversation';\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'initial';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}