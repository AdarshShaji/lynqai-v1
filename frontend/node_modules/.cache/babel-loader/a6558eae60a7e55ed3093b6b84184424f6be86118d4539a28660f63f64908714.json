{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n  async processUserInput(userInput, platform, conversationId) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      let aiResponse = '';\n      let isComplete = false;\n      while (!isComplete) {\n        const response = await axios.post('/generate-text', {\n          platform,\n          prompt: userInput,\n          conversationId,\n          previousResponse: aiResponse\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        aiResponse += response.data.generated_text;\n        isComplete = response.data.isComplete;\n        conversationId = response.data.conversationId;\n        if (!isComplete) {\n          // If the response is not complete, we need to ask for more\n          userInput = \"Please continue\";\n        }\n      }\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      this.updateConversationStage(aiResponse, userInput);\n      return {\n        text: aiResponse,\n        conversationId: conversationId\n      };\n    } catch (error) {\n      console.error('Error in processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are Sam, a professional Content Strategist specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely in a friendly, professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis or mention that you're an AI.\n\nKey Points:\n1. Ask one brief question at a time and wait for the user's answer before proceeding.\n2. Analyze the user's input and provide expert insights.\n3. Offer concise, platform-specific strategies.\n4. Suggest relevant hashtags or trends when appropriate.\n5. Maintain a balance between professionalism and approachability.\n6. After creating the post, ask if the user wants an image.\n7. Ensure all responses are complete and not cut off mid-sentence or mid-point.\n\nCurrent stage: ${this.currentStage}.\n\nConversation history:\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nBased on this, provide a brief, helpful response. Ensure your advice is specific to ${platform} and actionable. Your response must be complete and not cut off.\n\nUser's input: \"${userInput}\"\n\nSam: `;\n    return prompt;\n  }\n  constructContinuationPrompt(platform, incompleteResponse) {\n    return `Continue the following response for a ${platform} post, ensuring it's complete:\n\n${incompleteResponse}\n\nContinuation: `;\n  }\n  extractRelevantContent(fullResponse) {\n    const assistantIndex = fullResponse.indexOf(\"Sam:\");\n    if (assistantIndex !== -1) {\n      fullResponse = fullResponse.substring(assistantIndex + \"Sam:\".length);\n    }\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\n    fullResponse = fullResponse.replace(/\\n*$/, '');\n    return fullResponse.trim();\n  }\n  isResponseComplete(response) {\n    // Check if the response ends with a punctuation mark\n    const endsWithPunctuation = /[.!?]$/.test(response);\n\n    // Check if there are any incomplete numbered lists\n    const hasIncompleteList = /\\d+\\.(?![^\\n]*\\n\\d+\\.)/.test(response);\n    return endsWithPunctuation && !hasIncompleteList;\n  }\n  updateConversationStage(aiResponse, userInput) {\n    switch (this.currentStage) {\n      case 'greeting':\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\n          this.currentStage = 'topic_selection';\n        }\n        break;\n      case 'topic_selection':\n        if (aiResponse.includes(\"Who is your target audience\")) {\n          this.currentStage = 'audience_definition';\n        }\n        break;\n      case 'audience_definition':\n        if (aiResponse.includes(\"What's the main goal\")) {\n          this.currentStage = 'goal_setting';\n        }\n        break;\n      case 'goal_setting':\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\n          this.currentStage = 'content_ideation';\n        }\n        break;\n      case 'content_ideation':\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\n          this.currentStage = 'content_creation';\n        }\n        break;\n      case 'content_creation':\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\n          this.currentStage = 'review_and_refine';\n        }\n        break;\n      case 'review_and_refine':\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\n          this.currentStage = 'image_generation_query';\n        }\n        break;\n      case 'image_generation_query':\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\n          this.currentStage = 'final_touches';\n        }\n        break;\n      case 'final_touches':\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\n          this.currentStage = 'completion';\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'greeting';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","conversationId","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","aiResponse","isComplete","response","post","previousResponse","headers","Authorization","data","generated_text","updateConversationStage","text","error","console","map","msg","join","constructContinuationPrompt","incompleteResponse","extractRelevantContent","fullResponse","assistantIndex","indexOf","substring","length","replace","trim","isResponseComplete","endsWithPunctuation","test","hasIncompleteList","includes","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n\r\n  async processUserInput(userInput, platform, conversationId) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      let aiResponse = '';\r\n      let isComplete = false;\r\n\r\n      while (!isComplete) {\r\n        const response = await axios.post('/generate-text', \r\n          { platform, prompt: userInput, conversationId, previousResponse: aiResponse },\r\n          { \r\n            headers: { \r\n              Authorization: `Bearer ${token}`,\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }\r\n        );\r\n\r\n        aiResponse += response.data.generated_text;\r\n        isComplete = response.data.isComplete;\r\n        conversationId = response.data.conversationId;\r\n\r\n        if (!isComplete) {\r\n          // If the response is not complete, we need to ask for more\r\n          userInput = \"Please continue\";\r\n        }\r\n      }\r\n\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return {\r\n        text: aiResponse,\r\n        conversationId: conversationId\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are Sam, a professional Content Strategist specializing in ${platform}. Your role is to help users craft engaging social media posts. Respond concisely in a friendly, professional tone. Provide specific, actionable advice for ${platform}. Do not use emojis or mention that you're an AI.\r\n\r\nKey Points:\r\n1. Ask one brief question at a time and wait for the user's answer before proceeding.\r\n2. Analyze the user's input and provide expert insights.\r\n3. Offer concise, platform-specific strategies.\r\n4. Suggest relevant hashtags or trends when appropriate.\r\n5. Maintain a balance between professionalism and approachability.\r\n6. After creating the post, ask if the user wants an image.\r\n7. Ensure all responses are complete and not cut off mid-sentence or mid-point.\r\n\r\nCurrent stage: ${this.currentStage}.\r\n\r\nConversation history:\r\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\r\n\r\nBased on this, provide a brief, helpful response. Ensure your advice is specific to ${platform} and actionable. Your response must be complete and not cut off.\r\n\r\nUser's input: \"${userInput}\"\r\n\r\nSam: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  constructContinuationPrompt(platform, incompleteResponse) {\r\n    return `Continue the following response for a ${platform} post, ensuring it's complete:\r\n\r\n${incompleteResponse}\r\n\r\nContinuation: `;\r\n  }\r\n\r\n  extractRelevantContent(fullResponse) {\r\n    const assistantIndex = fullResponse.indexOf(\"Sam:\");\r\n    if (assistantIndex !== -1) {\r\n      fullResponse = fullResponse.substring(assistantIndex + \"Sam:\".length);\r\n    }\r\n\r\n    fullResponse = fullResponse.replace(/^[\\s\\n]*/, '');\r\n    fullResponse = fullResponse.replace(/\\n*$/, '');\r\n\r\n    return fullResponse.trim();\r\n  }\r\n\r\n  isResponseComplete(response) {\r\n    // Check if the response ends with a punctuation mark\r\n    const endsWithPunctuation = /[.!?]$/.test(response);\r\n    \r\n    // Check if there are any incomplete numbered lists\r\n    const hasIncompleteList = /\\d+\\.(?![^\\n]*\\n\\d+\\.)/.test(response);\r\n\r\n    return endsWithPunctuation && !hasIncompleteList;\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    switch (this.currentStage) {\r\n      case 'greeting':\r\n        if (aiResponse.includes(\"What's the main topic or theme\")) {\r\n          this.currentStage = 'topic_selection';\r\n        }\r\n        break;\r\n      case 'topic_selection':\r\n        if (aiResponse.includes(\"Who is your target audience\")) {\r\n          this.currentStage = 'audience_definition';\r\n        }\r\n        break;\r\n      case 'audience_definition':\r\n        if (aiResponse.includes(\"What's the main goal\")) {\r\n          this.currentStage = 'goal_setting';\r\n        }\r\n        break;\r\n      case 'goal_setting':\r\n        if (aiResponse.includes(\"Let's brainstorm some ideas\")) {\r\n          this.currentStage = 'content_ideation';\r\n        }\r\n        break;\r\n      case 'content_ideation':\r\n        if (aiResponse.includes(\"Great ideas! Now, let's craft\")) {\r\n          this.currentStage = 'content_creation';\r\n        }\r\n        break;\r\n      case 'content_creation':\r\n        if (aiResponse.includes(\"Here's a draft of your post\")) {\r\n          this.currentStage = 'review_and_refine';\r\n        }\r\n        break;\r\n      case 'review_and_refine':\r\n        if (aiResponse.includes(\"Would you like to generate an image\")) {\r\n          this.currentStage = 'image_generation_query';\r\n        }\r\n        break;\r\n      case 'image_generation_query':\r\n        if (aiResponse.includes(\"Great! Let's generate an image\") || aiResponse.includes(\"No problem, we'll skip the image\")) {\r\n          this.currentStage = 'final_touches';\r\n        }\r\n        break;\r\n      case 'final_touches':\r\n        if (aiResponse.includes(\"Your post is now ready to publish\")) {\r\n          this.currentStage = 'completion';\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'greeting';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}