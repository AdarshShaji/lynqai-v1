{"ast":null,"code":"import axios from './axiosConfig';\nimport { auth } from './firebase-config';\nclass AIAgent {\n  constructor() {\n    this.conversationHistory = [];\n    this.currentStage = 'initial';\n  }\n  async processUserInput(userInput, platform) {\n    this.conversationHistory.push({\n      role: 'user',\n      content: userInput\n    });\n    const prompt = this.constructPrompt(platform, userInput);\n    try {\n      var _auth$currentUser;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const aiResponse = response.data.generated_text;\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n\n      // Update the conversation stage based on the AI's response\n      this.updateConversationStage(aiResponse, userInput);\n      return aiResponse;\n    } catch (error) {\n      console.error('Error in AI processing:', error);\n      throw error;\n    }\n  }\n  constructPrompt(platform, userInput) {\n    let prompt = `You are a viral content creator and a researcher helping to create a ${platform} post. `;\n    prompt += `The current conversation stage is: ${this.currentStage}. `;\n    prompt += `Here's the conversation history:\\n\\n`;\n    this.conversationHistory.forEach(message => {\n      prompt += `${message.role}: ${message.content}\\n`;\n    });\n    prompt += `\\nBased on this conversation and the current stage, provide a helpful response. `;\n    prompt += `If the user is asking to generate a post, do so only if they explicitly request it. `;\n    prompt += `Otherwise, engage in a conversation, ask relevant questions, and provide suggestions. `;\n    prompt += `Always maintain a friendly and professional tone. `;\n    prompt += `Current user input: \"${userInput}\"\\n`;\n    prompt += `AI Assistant: `;\n    return prompt;\n  }\n  updateConversationStage(aiResponse, userInput) {\n    if (userInput.toLowerCase().includes('generate post') || userInput.toLowerCase().includes('create post')) {\n      this.currentStage = 'generate_post';\n    } else if (aiResponse.includes(\"What topic\") || aiResponse.includes(\"What would you like to post about\")) {\n      this.currentStage = 'topic';\n    } else if (aiResponse.includes(\"What's the main goal\") || aiResponse.includes(\"What do you want to achieve\")) {\n      this.currentStage = 'goal';\n    } else if (aiResponse.includes(\"Who's your target audience\") || aiResponse.includes(\"Who are you trying to reach\")) {\n      this.currentStage = 'audience';\n    } else if (aiResponse.includes(\"What tone\") || aiResponse.includes(\"How would you like the post to sound\")) {\n      this.currentStage = 'tone';\n    } else if (aiResponse.includes(\"How long\") || aiResponse.includes(\"What length\")) {\n      this.currentStage = 'length';\n    } else if (aiResponse.includes(\"Here's the post\") || aiResponse.includes(\"I've created a post\")) {\n      this.currentStage = 'final';\n    } else {\n      this.currentStage = 'conversation';\n    }\n  }\n  resetConversation() {\n    this.conversationHistory = [];\n    this.currentStage = 'initial';\n  }\n}\nconst aiAgent = new AIAgent();\nexport default aiAgent;","map":{"version":3,"names":["axios","auth","AIAgent","constructor","conversationHistory","currentStage","processUserInput","userInput","platform","push","role","content","prompt","constructPrompt","_auth$currentUser","token","currentUser","getIdToken","response","post","headers","Authorization","aiResponse","data","generated_text","updateConversationStage","error","console","forEach","message","toLowerCase","includes","resetConversation","aiAgent"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/AIAgent.js"],"sourcesContent":["import axios from './axiosConfig';\r\nimport { auth } from './firebase-config';\r\n\r\nclass AIAgent {\r\n  constructor() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'initial';\r\n  }\r\n\r\n  async processUserInput(userInput, platform) {\r\n    this.conversationHistory.push({ role: 'user', content: userInput });\r\n\r\n    const prompt = this.constructPrompt(platform, userInput);\r\n\r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      const aiResponse = response.data.generated_text;\r\n      this.conversationHistory.push({ role: 'assistant', content: aiResponse });\r\n\r\n      // Update the conversation stage based on the AI's response\r\n      this.updateConversationStage(aiResponse, userInput);\r\n\r\n      return aiResponse;\r\n    } catch (error) {\r\n      console.error('Error in AI processing:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  constructPrompt(platform, userInput) {\r\n    let prompt = `You are a viral content creator and a researcher helping to create a ${platform} post. `;\r\n    prompt += `The current conversation stage is: ${this.currentStage}. `;\r\n    prompt += `Here's the conversation history:\\n\\n`;\r\n\r\n    this.conversationHistory.forEach(message => {\r\n      prompt += `${message.role}: ${message.content}\\n`;\r\n    });\r\n\r\n    prompt += `\\nBased on this conversation and the current stage, provide a helpful response. `;\r\n    prompt += `If the user is asking to generate a post, do so only if they explicitly request it. `;\r\n    prompt += `Otherwise, engage in a conversation, ask relevant questions, and provide suggestions. `;\r\n    prompt += `Always maintain a friendly and professional tone. `;\r\n    prompt += `Current user input: \"${userInput}\"\\n`;\r\n    prompt += `AI Assistant: `;\r\n\r\n    return prompt;\r\n  }\r\n\r\n  updateConversationStage(aiResponse, userInput) {\r\n    if (userInput.toLowerCase().includes('generate post') || userInput.toLowerCase().includes('create post')) {\r\n      this.currentStage = 'generate_post';\r\n    } else if (aiResponse.includes(\"What topic\") || aiResponse.includes(\"What would you like to post about\")) {\r\n      this.currentStage = 'topic';\r\n    } else if (aiResponse.includes(\"What's the main goal\") || aiResponse.includes(\"What do you want to achieve\")) {\r\n      this.currentStage = 'goal';\r\n    } else if (aiResponse.includes(\"Who's your target audience\") || aiResponse.includes(\"Who are you trying to reach\")) {\r\n      this.currentStage = 'audience';\r\n    } else if (aiResponse.includes(\"What tone\") || aiResponse.includes(\"How would you like the post to sound\")) {\r\n      this.currentStage = 'tone';\r\n    } else if (aiResponse.includes(\"How long\") || aiResponse.includes(\"What length\")) {\r\n      this.currentStage = 'length';\r\n    } else if (aiResponse.includes(\"Here's the post\") || aiResponse.includes(\"I've created a post\")) {\r\n      this.currentStage = 'final';\r\n    } else {\r\n      this.currentStage = 'conversation';\r\n    }\r\n  }\r\n\r\n  resetConversation() {\r\n    this.conversationHistory = [];\r\n    this.currentStage = 'initial';\r\n  }\r\n}\r\n\r\nconst aiAgent = new AIAgent();\r\nexport default aiAgent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}