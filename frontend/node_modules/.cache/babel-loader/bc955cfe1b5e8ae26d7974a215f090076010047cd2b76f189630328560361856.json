{"ast":null,"code":"var _jsxFileName = \"D:\\\\Academic Courses\\\\AI\\\\LynqAI_v1\\\\frontend\\\\src\\\\pages\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Send, Image, Loader2, Menu, X } from 'lucide-react';\nimport { collection, query, where, getDocs, addDoc, orderBy, serverTimestamp, updateDoc, doc } from 'firebase/firestore';\nimport { firestore, auth } from '../firebase-config';\nimport axios from '../axiosConfig';\nimport { useNavigate } from 'react-router-dom';\nimport AIAgent from '../AIAgent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst platforms = ['LinkedIn', 'Twitter', 'Facebook', 'Instagram'];\nexport default function Chat() {\n  _s();\n  const [platform, setPlatform] = useState('LinkedIn');\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [conversations, setConversations] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const navigate = useNavigate();\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [userResponses, setUserResponses] = useState({});\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [conversationStage, setConversationStage] = useState('initial');\n  const questions = [{\n    key: 'tone',\n    question: \"Let's start with the tone. How would you like your post to sound?\",\n    options: ['Professional', 'Inspirational', 'Casual']\n  }, {\n    key: 'length',\n    question: \"Great choice! Now, how long should we make this post?\",\n    options: ['Short (1-2 sentences)', 'Medium (3-4 sentences)', 'Long (5+ sentences)']\n  }, {\n    key: 'goal',\n    question: \"Alright, what's the main goal you want to achieve with this post?\",\n    options: ['Inform', 'Engage', 'Promote']\n  }, {\n    key: 'callToAction',\n    question: \"Almost there! Would you like to include a call-to-action in your post?\",\n    options: ['Yes', 'No']\n  }];\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        console.log('User authenticated:', user.uid);\n        fetchConversations();\n      } else {\n        console.log('No user authenticated, redirecting to login');\n        navigate('/');\n      }\n    });\n    return () => unsubscribe();\n  }, [navigate]);\n  const fetchConversations = async () => {\n    setError(null);\n    try {\n      const user = auth.currentUser;\n      if (!user) throw new Error('No user logged in');\n      console.log('Fetching conversations for user:', user.uid);\n      const q = query(collection(firestore, 'conversations'), where('userId', '==', user.uid), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const conversationsList = querySnapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          prompt: data.prompt,\n          response: data.response,\n          platform: data.platform,\n          createdAt: data.createdAt ? data.createdAt.toDate() : new Date(),\n          messages: [{\n            type: 'user',\n            content: data.prompt,\n            platform: data.platform\n          }, {\n            type: 'assistant',\n            content: data.response,\n            platform: data.platform\n          }]\n        };\n      });\n      console.log('Fetched conversations:', conversationsList);\n      setConversations(conversationsList);\n    } catch (err) {\n      console.error('Error fetching conversations:', err);\n      if (err.code === 'failed-precondition' || err.message.includes('requires an index')) {\n        setError('Database index is being created. Please try again in a few minutes.');\n      } else {\n        setError('Failed to fetch conversations. Please try again.');\n      }\n    }\n  };\n  const handleSubmit = async type => {\n    if (!input.trim()) return;\n    setIsLoading(true);\n    setError(null);\n    const newUserMessage = {\n      type: 'user',\n      content: input,\n      platform\n    };\n    const updatedMessages = [...messages, newUserMessage];\n    setMessages(updatedMessages);\n    setInput('');\n    try {\n      const aiResponse = await AIAgent.processUserInput(input, platform);\n      const newAssistantMessage = {\n        type: 'assistant',\n        content: aiResponse,\n        platform\n      };\n      setMessages([...updatedMessages, newAssistantMessage]);\n\n      // Update conversation history and save to Firestore\n      // ... (keep your existing logic for this)\n    } catch (err) {\n      console.error('Error:', err);\n      setError('An error occurred while processing your request. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const processUserInput = async updatedMessages => {\n    const lastUserMessage = updatedMessages[updatedMessages.length - 1].content.toLowerCase();\n    if (conversationStage === 'initial' && lastUserMessage.includes('create a post')) {\n      setConversationStage('topic');\n      const aiMessage = {\n        type: 'assistant',\n        content: \"Great! I'd be happy to help you create a post. What topic or niche would you like to focus on?\",\n        platform\n      };\n      setMessages([...updatedMessages, aiMessage]);\n    } else {\n      await generateDynamicQuestion(updatedMessages);\n    }\n    setIsLoading(false);\n  };\n  const generateDynamicQuestion = async updatedMessages => {\n    const lastUserMessage = updatedMessages[updatedMessages.length - 1].content;\n    let aiQuestion = '';\n    switch (conversationStage) {\n      case 'topic':\n        aiQuestion = `Excellent choice! For a post about ${lastUserMessage}, what's the main goal you want to achieve? For example, do you want to inform, inspire, or promote something specific?`;\n        setConversationStage('goal');\n        break;\n      case 'goal':\n        aiQuestion = `Got it. Now, who's your target audience for this post? Knowing this will help us tailor the content perfectly.`;\n        setConversationStage('audience');\n        break;\n      case 'audience':\n        aiQuestion = `Perfect. What tone would resonate best with your audience? Should it be professional, casual, inspirational, or something else?`;\n        setConversationStage('tone');\n        break;\n      case 'tone':\n        aiQuestion = `Great choice. How long would you like the post to be? Short and snappy, medium-length, or a more detailed long-form post?`;\n        setConversationStage('length');\n        break;\n      case 'length':\n        aiQuestion = `Alright, we're almost there! Is there any specific information or key points you definitely want to include in the post?`;\n        setConversationStage('specifics');\n        break;\n      case 'specifics':\n        aiQuestion = `Fantastic! I have all the information I need. Would you like me to generate the post now, or is there anything else you'd like to add or modify?`;\n        setConversationStage('confirmation');\n        break;\n      case 'confirmation':\n        await generateFinalPost(updatedMessages);\n        return;\n      default:\n        aiQuestion = \"I'm sorry, I didn't quite catch that. Could you please clarify what you'd like to do next?\";\n        setConversationStage('initial');\n    }\n    const aiMessage = {\n      type: 'assistant',\n      content: aiQuestion,\n      platform\n    };\n    setMessages([...updatedMessages, aiMessage]);\n  };\n  const generateFinalPost = async updatedMessages => {\n    let enhancedPrompt = constructEnhancedPrompt(updatedMessages, platform);\n    try {\n      var _auth$currentUser, _auth$currentUser2;\n      const token = await ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.getIdToken());\n      console.log('Sending request to backend');\n      const response = await axios.post('/generate-text', {\n        platform,\n        prompt: enhancedPrompt\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = response.data;\n      console.log('AI Model Response:', data);\n\n      // Extract only the generated content, removing any instructions or prompts\n      const aiContent = extractGeneratedContent(data.generated_text);\n      const newAssistantMessage = {\n        type: 'assistant',\n        content: `Here's the ${platform} post I've crafted for you:\\n\\n${aiContent}\\n\\nWhat do you think? Would you like to make any changes or try a different approach?`,\n        platform\n      };\n      updatedMessages.push(newAssistantMessage);\n      setMessages(updatedMessages);\n\n      // Update conversation history\n      const updatedHistory = [...conversationHistory, ...updatedMessages];\n      setConversationHistory(updatedHistory);\n\n      // Save conversation to Firestore\n      if ((_auth$currentUser2 = auth.currentUser) !== null && _auth$currentUser2 !== void 0 && _auth$currentUser2.uid) {\n        console.log('Saving conversation to Firestore');\n        try {\n          const conversationData = {\n            userId: auth.currentUser.uid,\n            messages: updatedMessages,\n            platform,\n            lastUpdated: serverTimestamp(),\n            conversationHistory: updatedHistory\n          };\n          if (selectedConversation) {\n            await updateDoc(doc(firestore, 'conversations', selectedConversation.id), conversationData);\n            console.log('Conversation updated with ID:', selectedConversation.id);\n          } else {\n            const docRef = await addDoc(collection(firestore, 'conversations'), {\n              ...conversationData,\n              createdAt: serverTimestamp()\n            });\n            console.log('New conversation saved with ID:', docRef.id);\n            setSelectedConversation({\n              id: docRef.id,\n              ...conversationData\n            });\n          }\n        } catch (firestoreError) {\n          console.error('Error saving to Firestore:', firestoreError);\n          setError('Failed to save conversation. Please try again.');\n        }\n      } else {\n        console.error('User not authenticated');\n        setError('User not authenticated. Please log in again.');\n      }\n      fetchConversations();\n    } catch (err) {\n      console.error('Error:', err);\n      let errorMessage = 'An error occurred while generating content. Please try again.';\n      if (err.response && err.response.data && err.response.data.error) {\n        errorMessage = err.response.data.error;\n        if (err.response.data.details) {\n          errorMessage += ` Details: ${err.response.data.details}`;\n        }\n      }\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n      setCurrentQuestion(null);\n      setUserResponses({});\n      setQuestionIndex(0);\n      setConversationStage('initial');\n    }\n  };\n  const constructEnhancedPrompt = (messages, platform) => {\n    let basePrompt = `Create a ${platform} post based on the following conversation:\\n\\n`;\n    messages.forEach((message, index) => {\n      basePrompt += `${message.type === 'user' ? 'User' : 'Assistant'}: ${message.content}\\n`;\n    });\n    basePrompt += `\\nBased on this conversation, generate a compelling ${platform} post that addresses the user's goals and preferences. Include relevant hashtags if appropriate.`;\n    return basePrompt;\n  };\n  const startNewConversation = () => {\n    setMessages([]);\n    setSelectedConversation(null);\n    setPlatform('LinkedIn');\n    setIsSidebarOpen(false);\n    setConversationHistory([]);\n  };\n  const loadConversation = conversation => {\n    if (conversation && conversation.messages) {\n      console.log('Loading conversation:', conversation);\n      setMessages(conversation.messages);\n      setPlatform(conversation.platform || 'LinkedIn');\n      setSelectedConversation(conversation);\n      setIsSidebarOpen(false);\n      // Set conversation history\n      setConversationHistory(conversation.conversationHistory || []);\n    } else {\n      console.error('Invalid conversation data:', conversation);\n      setError('Failed to load conversation. Please try again.');\n    }\n  };\n\n  // Helper function to extract only the generated content\n  const extractGeneratedContent = fullResponse => {\n    // Remove any conversation history or AI responses\n    const contentStart = fullResponse.lastIndexOf(\"Here's the generated post:\");\n    if (contentStart !== -1) {\n      fullResponse = fullResponse.substring(contentStart + \"Here's the generated post:\".length);\n    }\n\n    // Remove any remaining instructions or labels\n    fullResponse = fullResponse.replace(/Generated Post.*?:/g, '').trim();\n    fullResponse = fullResponse.replace(/Verification of the Content:.*$/s, '').trim();\n    return fullResponse.trim();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out md:relative md:translate-x-0`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center p-4 border-b\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold\",\n          children: \"Conversations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsSidebarOpen(false),\n          className: \"md:hidden\",\n          children: /*#__PURE__*/_jsxDEV(X, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startNewConversation,\n          className: \"w-full py-2 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300\",\n          children: \"New Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-y-auto h-full pb-20\",\n        children: conversations.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-center p-4\",\n          children: \"No conversations yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this) : conversations.map(conv => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => loadConversation(conv),\n          className: \"p-4 border-b hover:bg-gray-100 cursor-pointer transition duration-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium truncate\",\n            children: conv.prompt || (conv.messages && conv.messages.length > 0 ? conv.messages[0].content : 'No messages')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500\",\n            children: conv.createdAt ? conv.createdAt.toLocaleString() : 'Unknown date'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 17\n          }, this)]\n        }, conv.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-1 overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"bg-white shadow-sm p-4 flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsSidebarOpen(true),\n          className: \"md:hidden\",\n          children: /*#__PURE__*/_jsxDEV(Menu, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold text-center flex-1\",\n          children: selectedConversation ? `Conversation from ${selectedConversation.createdAt.toLocaleString()}` : 'Social Media Post Generator'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), selectedConversation && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startNewConversation,\n          className: \"bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-300\",\n          children: \"New Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 overflow-y-auto p-4 space-y-4\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-[70%] rounded-lg p-3 ${message.type === 'user' ? 'bg-blue-500 text-white' : 'bg-white shadow'}`,\n            children: [message.platform && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-semibold mb-1\",\n              children: message.platform\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 38\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this), message.image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: message.image,\n              alt: \"Generated\",\n              className: \"mt-2 rounded-lg max-w-full h-auto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white border-t border-gray-200 p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-2 mb-2 overflow-x-auto pb-2\",\n          children: platforms.map(p => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setPlatform(p),\n            className: `px-3 py-1 rounded-full text-sm flex-shrink-0 ${platform === p ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`,\n            children: p\n          }, p, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            placeholder: \"Type your prompt here...\",\n            className: \"flex-1 p-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500\",\n            onKeyPress: e => e.key === 'Enter' && handleSubmit('text')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSubmit('text'),\n            disabled: isLoading,\n            className: \"bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\",\n            children: isLoading ? /*#__PURE__*/_jsxDEV(Loader2, {\n              className: \"w-5 h-5 animate-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 28\n            }, this) : /*#__PURE__*/_jsxDEV(Send, {\n              className: \"w-5 h-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 75\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSubmit('image'),\n            disabled: isLoading,\n            className: \"bg-purple-500 text-white p-2 rounded-full hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-purple-500\",\n            children: isLoading ? /*#__PURE__*/_jsxDEV(Loader2, {\n              className: \"w-5 h-5 animate-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 28\n            }, this) : /*#__PURE__*/_jsxDEV(Image, {\n              className: \"w-5 h-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 75\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500 p-4 absolute bottom-0 left-0 right-0 bg-white\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"CcrzMl55IpDY+p+zYMqoOTpQ4WU=\", false, function () {\n  return [useNavigate];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useEffect","Send","Image","Loader2","Menu","X","collection","query","where","getDocs","addDoc","orderBy","serverTimestamp","updateDoc","doc","firestore","auth","axios","useNavigate","AIAgent","jsxDEV","_jsxDEV","platforms","Chat","_s","platform","setPlatform","input","setInput","messages","setMessages","conversations","setConversations","isLoading","setIsLoading","isSidebarOpen","setIsSidebarOpen","error","setError","selectedConversation","setSelectedConversation","conversationHistory","setConversationHistory","navigate","currentQuestion","setCurrentQuestion","userResponses","setUserResponses","questionIndex","setQuestionIndex","conversationStage","setConversationStage","questions","key","question","options","unsubscribe","onAuthStateChanged","user","console","log","uid","fetchConversations","currentUser","Error","q","querySnapshot","conversationsList","docs","map","data","id","prompt","response","createdAt","toDate","Date","type","content","err","code","message","includes","handleSubmit","trim","newUserMessage","updatedMessages","aiResponse","processUserInput","newAssistantMessage","lastUserMessage","length","toLowerCase","aiMessage","generateDynamicQuestion","aiQuestion","generateFinalPost","enhancedPrompt","constructEnhancedPrompt","_auth$currentUser","_auth$currentUser2","token","getIdToken","post","headers","Authorization","aiContent","extractGeneratedContent","generated_text","push","updatedHistory","conversationData","userId","lastUpdated","docRef","firestoreError","errorMessage","details","basePrompt","forEach","index","startNewConversation","loadConversation","conversation","fullResponse","contentStart","lastIndexOf","substring","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","conv","toLocaleString","image","src","alt","p","value","onChange","e","target","placeholder","onKeyPress","disabled","_c","$RefreshReg$"],"sources":["D:/Academic Courses/AI/LynqAI_v1/frontend/src/pages/Chat.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Send, Image, Loader2, Menu, X } from 'lucide-react';\r\nimport { collection, query, where, getDocs, addDoc, orderBy, serverTimestamp, updateDoc, doc } from 'firebase/firestore';\r\nimport { firestore, auth } from '../firebase-config';\r\nimport axios from '../axiosConfig';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AIAgent from '../AIAgent';\r\n\r\nconst platforms = ['LinkedIn', 'Twitter', 'Facebook', 'Instagram'];\r\n\r\nexport default function Chat() {\r\n  const [platform, setPlatform] = useState('LinkedIn');\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [conversations, setConversations] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n  const [conversationHistory, setConversationHistory] = useState([]);\r\n  const navigate = useNavigate();\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [userResponses, setUserResponses] = useState({});\r\n  const [questionIndex, setQuestionIndex] = useState(0);\r\n  const [conversationStage, setConversationStage] = useState('initial');\r\n\r\n  const questions = [\r\n    { key: 'tone', question: \"Let's start with the tone. How would you like your post to sound?\", options: ['Professional', 'Inspirational', 'Casual'] },\r\n    { key: 'length', question: \"Great choice! Now, how long should we make this post?\", options: ['Short (1-2 sentences)', 'Medium (3-4 sentences)', 'Long (5+ sentences)'] },\r\n    { key: 'goal', question: \"Alright, what's the main goal you want to achieve with this post?\", options: ['Inform', 'Engage', 'Promote'] },\r\n    { key: 'callToAction', question: \"Almost there! Would you like to include a call-to-action in your post?\", options: ['Yes', 'No'] },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      if (user) {\r\n        console.log('User authenticated:', user.uid);\r\n        fetchConversations();\r\n      } else {\r\n        console.log('No user authenticated, redirecting to login');\r\n        navigate('/');\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [navigate]);\r\n\r\n  const fetchConversations = async () => {\r\n    setError(null);\r\n    try {\r\n      const user = auth.currentUser;\r\n      if (!user) throw new Error('No user logged in');\r\n\r\n      console.log('Fetching conversations for user:', user.uid);\r\n      const q = query(\r\n        collection(firestore, 'conversations'),\r\n        where('userId', '==', user.uid),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      const conversationsList = querySnapshot.docs.map(doc => {\r\n        const data = doc.data();\r\n        return {\r\n          id: doc.id,\r\n          prompt: data.prompt,\r\n          response: data.response,\r\n          platform: data.platform,\r\n          createdAt: data.createdAt ? data.createdAt.toDate() : new Date(),\r\n          messages: [\r\n            { type: 'user', content: data.prompt, platform: data.platform },\r\n            { type: 'assistant', content: data.response, platform: data.platform }\r\n          ]\r\n        };\r\n      });\r\n      console.log('Fetched conversations:', conversationsList);\r\n      setConversations(conversationsList);\r\n    } catch (err) {\r\n      console.error('Error fetching conversations:', err);\r\n      if (err.code === 'failed-precondition' || err.message.includes('requires an index')) {\r\n        setError('Database index is being created. Please try again in a few minutes.');\r\n      } else {\r\n        setError('Failed to fetch conversations. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (type) => {\r\n    if (!input.trim()) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    const newUserMessage = { type: 'user', content: input, platform };\r\n    const updatedMessages = [...messages, newUserMessage];\r\n    setMessages(updatedMessages);\r\n    setInput('');\r\n\r\n    try {\r\n      const aiResponse = await AIAgent.processUserInput(input, platform);\r\n      \r\n      const newAssistantMessage = {\r\n        type: 'assistant',\r\n        content: aiResponse,\r\n        platform\r\n      };\r\n      \r\n      setMessages([...updatedMessages, newAssistantMessage]);\r\n\r\n      // Update conversation history and save to Firestore\r\n      // ... (keep your existing logic for this)\r\n\r\n    } catch (err) {\r\n      console.error('Error:', err);\r\n      setError('An error occurred while processing your request. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const processUserInput = async (updatedMessages) => {\r\n    const lastUserMessage = updatedMessages[updatedMessages.length - 1].content.toLowerCase();\r\n\r\n    if (conversationStage === 'initial' && lastUserMessage.includes('create a post')) {\r\n      setConversationStage('topic');\r\n      const aiMessage = {\r\n        type: 'assistant',\r\n        content: \"Great! I'd be happy to help you create a post. What topic or niche would you like to focus on?\",\r\n        platform\r\n      };\r\n      setMessages([...updatedMessages, aiMessage]);\r\n    } else {\r\n      await generateDynamicQuestion(updatedMessages);\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const generateDynamicQuestion = async (updatedMessages) => {\r\n    const lastUserMessage = updatedMessages[updatedMessages.length - 1].content;\r\n    let aiQuestion = '';\r\n\r\n    switch (conversationStage) {\r\n      case 'topic':\r\n        aiQuestion = `Excellent choice! For a post about ${lastUserMessage}, what's the main goal you want to achieve? For example, do you want to inform, inspire, or promote something specific?`;\r\n        setConversationStage('goal');\r\n        break;\r\n      case 'goal':\r\n        aiQuestion = `Got it. Now, who's your target audience for this post? Knowing this will help us tailor the content perfectly.`;\r\n        setConversationStage('audience');\r\n        break;\r\n      case 'audience':\r\n        aiQuestion = `Perfect. What tone would resonate best with your audience? Should it be professional, casual, inspirational, or something else?`;\r\n        setConversationStage('tone');\r\n        break;\r\n      case 'tone':\r\n        aiQuestion = `Great choice. How long would you like the post to be? Short and snappy, medium-length, or a more detailed long-form post?`;\r\n        setConversationStage('length');\r\n        break;\r\n      case 'length':\r\n        aiQuestion = `Alright, we're almost there! Is there any specific information or key points you definitely want to include in the post?`;\r\n        setConversationStage('specifics');\r\n        break;\r\n      case 'specifics':\r\n        aiQuestion = `Fantastic! I have all the information I need. Would you like me to generate the post now, or is there anything else you'd like to add or modify?`;\r\n        setConversationStage('confirmation');\r\n        break;\r\n      case 'confirmation':\r\n        await generateFinalPost(updatedMessages);\r\n        return;\r\n      default:\r\n        aiQuestion = \"I'm sorry, I didn't quite catch that. Could you please clarify what you'd like to do next?\";\r\n        setConversationStage('initial');\r\n    }\r\n\r\n    const aiMessage = {\r\n      type: 'assistant',\r\n      content: aiQuestion,\r\n      platform\r\n    };\r\n    setMessages([...updatedMessages, aiMessage]);\r\n  };\r\n\r\n  const generateFinalPost = async (updatedMessages) => {\r\n    let enhancedPrompt = constructEnhancedPrompt(updatedMessages, platform);\r\n    \r\n    try {\r\n      const token = await auth.currentUser?.getIdToken();\r\n      console.log('Sending request to backend');\r\n      const response = await axios.post('/generate-text', \r\n        { platform, prompt: enhancedPrompt },\r\n        { \r\n          headers: { \r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n      \r\n      const data = response.data;\r\n      \r\n      console.log('AI Model Response:', data);\r\n      \r\n      // Extract only the generated content, removing any instructions or prompts\r\n      const aiContent = extractGeneratedContent(data.generated_text);\r\n      \r\n      const newAssistantMessage = {\r\n        type: 'assistant',\r\n        content: `Here's the ${platform} post I've crafted for you:\\n\\n${aiContent}\\n\\nWhat do you think? Would you like to make any changes or try a different approach?`,\r\n        platform\r\n      };\r\n      \r\n      updatedMessages.push(newAssistantMessage);\r\n      setMessages(updatedMessages);\r\n\r\n      // Update conversation history\r\n      const updatedHistory = [...conversationHistory, ...updatedMessages];\r\n      setConversationHistory(updatedHistory);\r\n\r\n      // Save conversation to Firestore\r\n      if (auth.currentUser?.uid) {\r\n        console.log('Saving conversation to Firestore');\r\n        try {\r\n          const conversationData = {\r\n            userId: auth.currentUser.uid,\r\n            messages: updatedMessages,\r\n            platform,\r\n            lastUpdated: serverTimestamp(),\r\n            conversationHistory: updatedHistory\r\n          };\r\n\r\n          if (selectedConversation) {\r\n            await updateDoc(doc(firestore, 'conversations', selectedConversation.id), conversationData);\r\n            console.log('Conversation updated with ID:', selectedConversation.id);\r\n          } else {\r\n            const docRef = await addDoc(collection(firestore, 'conversations'), {\r\n              ...conversationData,\r\n              createdAt: serverTimestamp()\r\n            });\r\n            console.log('New conversation saved with ID:', docRef.id);\r\n            setSelectedConversation({ id: docRef.id, ...conversationData });\r\n          }\r\n        } catch (firestoreError) {\r\n          console.error('Error saving to Firestore:', firestoreError);\r\n          setError('Failed to save conversation. Please try again.');\r\n        }\r\n      } else {\r\n        console.error('User not authenticated');\r\n        setError('User not authenticated. Please log in again.');\r\n      }\r\n\r\n      fetchConversations();\r\n    } catch (err) {\r\n      console.error('Error:', err);\r\n      let errorMessage = 'An error occurred while generating content. Please try again.';\r\n      if (err.response && err.response.data && err.response.data.error) {\r\n        errorMessage = err.response.data.error;\r\n        if (err.response.data.details) {\r\n          errorMessage += ` Details: ${err.response.data.details}`;\r\n        }\r\n      }\r\n      setError(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setCurrentQuestion(null);\r\n      setUserResponses({});\r\n      setQuestionIndex(0);\r\n      setConversationStage('initial');\r\n    }\r\n  };\r\n\r\n  const constructEnhancedPrompt = (messages, platform) => {\r\n    let basePrompt = `Create a ${platform} post based on the following conversation:\\n\\n`;\r\n\r\n    messages.forEach((message, index) => {\r\n      basePrompt += `${message.type === 'user' ? 'User' : 'Assistant'}: ${message.content}\\n`;\r\n    });\r\n\r\n    basePrompt += `\\nBased on this conversation, generate a compelling ${platform} post that addresses the user's goals and preferences. Include relevant hashtags if appropriate.`;\r\n\r\n    return basePrompt;\r\n  };\r\n\r\n  const startNewConversation = () => {\r\n    setMessages([]);\r\n    setSelectedConversation(null);\r\n    setPlatform('LinkedIn');\r\n    setIsSidebarOpen(false);\r\n    setConversationHistory([]);\r\n  };\r\n\r\n  const loadConversation = (conversation) => {\r\n    if (conversation && conversation.messages) {\r\n      console.log('Loading conversation:', conversation);\r\n      setMessages(conversation.messages);\r\n      setPlatform(conversation.platform || 'LinkedIn');\r\n      setSelectedConversation(conversation);\r\n      setIsSidebarOpen(false);\r\n      // Set conversation history\r\n      setConversationHistory(conversation.conversationHistory || []);\r\n    } else {\r\n      console.error('Invalid conversation data:', conversation);\r\n      setError('Failed to load conversation. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Helper function to extract only the generated content\r\n  const extractGeneratedContent = (fullResponse) => {\r\n    // Remove any conversation history or AI responses\r\n    const contentStart = fullResponse.lastIndexOf(\"Here's the generated post:\");\r\n    if (contentStart !== -1) {\r\n      fullResponse = fullResponse.substring(contentStart + \"Here's the generated post:\".length);\r\n    }\r\n\r\n    // Remove any remaining instructions or labels\r\n    fullResponse = fullResponse.replace(/Generated Post.*?:/g, '').trim();\r\n    fullResponse = fullResponse.replace(/Verification of the Content:.*$/s, '').trim();\r\n\r\n    return fullResponse.trim();\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-100\">\r\n      {/* Sidebar */}\r\n      <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out md:relative md:translate-x-0`}>\r\n        <div className=\"flex justify-between items-center p-4 border-b\">\r\n          <h2 className=\"text-xl font-semibold\">Conversations</h2>\r\n          <button onClick={() => setIsSidebarOpen(false)} className=\"md:hidden\">\r\n            <X className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n        <div className=\"p-4\">\r\n          <button\r\n            onClick={startNewConversation}\r\n            className=\"w-full py-2 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300\"\r\n          >\r\n            New Conversation\r\n          </button>\r\n        </div>\r\n        <div className=\"overflow-y-auto h-full pb-20\">\r\n          {conversations.length === 0 ? (\r\n            <p className=\"text-gray-500 text-center p-4\">No conversations yet</p>\r\n          ) : (\r\n            conversations.map((conv) => (\r\n              <div\r\n                key={conv.id}\r\n                onClick={() => loadConversation(conv)}\r\n                className=\"p-4 border-b hover:bg-gray-100 cursor-pointer transition duration-300\"\r\n              >\r\n                <p className=\"font-medium truncate\">\r\n                  {conv.prompt || (conv.messages && conv.messages.length > 0 ? conv.messages[0].content : 'No messages')}\r\n                </p>\r\n                <p className=\"text-sm text-gray-500\">\r\n                  {conv.createdAt ? conv.createdAt.toLocaleString() : 'Unknown date'}\r\n                </p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex flex-col flex-1 overflow-hidden\">\r\n        {/* Header */}\r\n        <header className=\"bg-white shadow-sm p-4 flex justify-between items-center\">\r\n          <button onClick={() => setIsSidebarOpen(true)} className=\"md:hidden\">\r\n            <Menu className=\"w-6 h-6\" />\r\n          </button>\r\n          <h1 className=\"text-2xl font-bold text-center flex-1\">\r\n            {selectedConversation ? `Conversation from ${selectedConversation.createdAt.toLocaleString()}` : 'Social Media Post Generator'}\r\n          </h1>\r\n          {selectedConversation && (\r\n            <button\r\n              onClick={startNewConversation}\r\n              className=\"bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition duration-300\"\r\n            >\r\n              New Conversation\r\n            </button>\r\n          )}\r\n        </header>\r\n\r\n        {/* Main chat area */}\r\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\r\n          {messages.map((message, index) => (\r\n            <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>\r\n              <div className={`max-w-[70%] rounded-lg p-3 ${message.type === 'user' ? 'bg-blue-500 text-white' : 'bg-white shadow'}`}>\r\n                {message.platform && <p className=\"font-semibold mb-1\">{message.platform}</p>}\r\n                <p>{message.content}</p>\r\n                {message.image && <img src={message.image} alt=\"Generated\" className=\"mt-2 rounded-lg max-w-full h-auto\" />}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Input area */}\r\n        <div className=\"bg-white border-t border-gray-200 p-4\">\r\n          <div className=\"flex space-x-2 mb-2 overflow-x-auto pb-2\">\r\n            {platforms.map(p => (\r\n              <button\r\n                key={p}\r\n                onClick={() => setPlatform(p)}\r\n                className={`px-3 py-1 rounded-full text-sm flex-shrink-0 ${\r\n                  platform === p ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'\r\n                }`}\r\n              >\r\n                {p}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              placeholder=\"Type your prompt here...\"\r\n              className=\"flex-1 p-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              onKeyPress={(e) => e.key === 'Enter' && handleSubmit('text')}\r\n            />\r\n            <button\r\n              onClick={() => handleSubmit('text')}\r\n              disabled={isLoading}\r\n              className=\"bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            >\r\n              {isLoading ? <Loader2 className=\"w-5 h-5 animate-spin\" /> : <Send className=\"w-5 h-5\" />}\r\n            </button>\r\n            <button\r\n              onClick={() => handleSubmit('image')}\r\n              disabled={isLoading}\r\n              className=\"bg-purple-500 text-white p-2 rounded-full hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-purple-500\"\r\n            >\r\n              {isLoading ? <Loader2 className=\"w-5 h-5 animate-spin\" /> : <Image className=\"w-5 h-5\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {error && <div className=\"text-red-500 p-4 absolute bottom-0 left-0 right-0 bg-white\">{error}</div>}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}